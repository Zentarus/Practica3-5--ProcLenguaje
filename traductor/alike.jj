//*****************************************************************
// File:   cl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   julio 2023
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
	IGNORE_CASE = true;
	COMMON_TOKEN_ACTION = false;
}

// -----------------------------------------------------------------------------


PARSER_BEGIN(alike)

package traductor;

//...

public class alike {
   //...
   
   public static void main(String[] args) {
	   alike parser = null;
	   
	   try {
		   if(args.length == 0) {
			   parser = new alike(System.in);
		   }
		   else {
			   parser = new alike(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el símbolo inicial de la gramática
		   parser.Programa();
		   //...
		   System.out.println("***** Análisis terminado con éxito *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.err.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		   System.err.println("LEX_ERROR: " + e.getMessage());

	   }
	   catch (ParseException e) {
			System.err.println("Parse_exception: " + e.getMessage());
	   }
	   //...
   }
}
PARSER_END(alike)

// ----------------------------------------------------------------------------

TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
|	< #UNDERSCORE: "_" >
}

SKIP : { 
	< tSPACE: " " >
| 	< tNL: "\n" >
|	< tTAB: "\t" >
|	< tENTER: "\r" >
| 	< tCOMENTARIO: "--"(~["\n"])* >
}

TOKEN : { // Tipos
	< tBOOL: "boolean" >
|	< tCHAR: "char" >
|	< tCHARACTER: "character" >
|   < tINTEGER: "integer" >
|	< tNULL: "null" >
|	< tARRAY: "array" >
|	< tCONST_INT: (["0"-"9"])+ >
|	< tCONST_CHAR: "\'"(~["\n","\t","\r","\f","\b","\'","\""] | ("\"\"") | ("\'\'"))"\'" >
| 	< tCONST_STRING: "\""(~["\n","\t","\r","\f","\b","\'","\""] | ("\"\"") | ("\'\'"))*"\"" >
}

TOKEN : { // Operadores
	< tASIGN: ":=" >
|	< tSUM: "+" >
|   < tRES: "-" >
|	< tEQU: "=" >
|	< tGT: ">" >
|	< tLT: "<" >
|	< tGE: ">=" >
|	< tLE: "<=" >
|	< tDIF: "/=" >
|	< tMUL: "*" >
|	< tMOD: "mod" >
|	< tDIV: "/" >
|	< tNOT: "not" >
|	< tAND: "and" >
|	< tOR: "or" >
}

TOKEN : { // Sintaxis reservada estructuras simples
	< tIF: "if" >
|	< tELIF: "elsif" >
|	< tELSE: "else" >
|	< tTHEN: "then" >
|	< tWHILE: "while" >
|	< tLOOP: "loop" >
|	< tTRUE: "true" >
|	< tFALSE: "false" >
}

TOKEN : { // Sintaxis reservada funciones
	< tPROCEDURE: "procedure" >
|	< tFUNCTION: "function" >
|	< tIS: "is" >
|	< tREF: "ref" >
|	< tOF: "of" >
|	< tBEGIN: "begin" >
|	< tEND: "end" >
|	< tRETURN: "return" >
}

TOKEN : { // Instrucciones E/S
	< tSKIP_LN: "skip_line" >
|	< tPUT: "put" >
|	< tPUT_LN: "put_line" >
|	< tGET: "get" >
|	< tCHAR2INT: "char2int" >
|	< tINT2CHAR: "int2char" >
}

TOKEN : { // Separadores
	< tPUNTO: "." >
|	< tCOMA:	"," >
|	< tDOSPUNTOS: ".." >
|	< tDOBLEPUNTO: ":" >
|	< tPUNTOCOMA: ";" >
|	< tCORCHETES_OPEN: "[" >
|	< tCORCHETES_CLOSE: "]" >
|	< tPARENTESIS_OPEN: "(" >
|	< tPARENTESIS_CLOSE: ")" >
|	< tID: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >
}

TOKEN_MGR_DECLS : {
	static void CommonTokenAction(Token t) {

		 String[] nombresTokens = {
			"letra", "digito", "barra baja", "espacio", "fin de linea", "tabulador", "retorno", "comentario",
			"boolean", "char", "character", "integer", "null", "array", "const integer", "const char", "const string",
			"asignacion", "suma", "resta", "comparacion igualdad", "comparacion mayor estricto", "comparacion menor estricto", 
			"comparacion mayor o igual", "comparacion menor o igual", "comparacion diferencia", "multiplicacion", "modulo", "division", "negacion logica", 
			"operador logico", "operador logico", "token", "token", "token", "token", "token", "token", "constante aritmetica", "constante aritmetica", 
			"token", "token", "token", "token", "token", "token", "token", "token", "funcion reservada", "funcion reservada", "funcion reservada", 
			"funcion reservada", "funcion reservada", "funcion reservada", "token separador", "token separador", "token separador", "token separador",
			"token separador", "token separador", "token separador", "token separador", "token separador", "identificador"
		};

		int linea = t.beginLine;
		int columna = t.beginColumn;
		String image = t.image;
		if (t.kind != 0){ // Si es distinto de fin de linea
			System.out.println("(" + linea + "," + columna + "): " + nombresTokens[t.kind-1] + " \"" + image + "\"");
		}
	}
}


//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
/*void Programa() : 
{
	//Token t;
}
{
   ( 
	   < tBEGIN >
	   | 
	   < tBOOL > | < tCHAR > | < tCHARACTER > | < tINTEGER > | < tNULL > | < tARRAY > | < tCONST_INT > | < tCONST_CHAR > | < tCONST_STRING > 
	   |
	   < tASIGN > | < tSUM > | < tRES > | < tEQU > | < tGT > | < tLT > | < tGE > | < tLE > | < tMUL > | < tMOD > | < tDIV > | < tNOT > | < tDIF > | < tAND > | < tOR >
	   |
	   < tIF > | < tELIF > |	< tTHEN > |	< tWHILE > | < tLOOP > | < tTRUE > | < tFALSE > | <tELSE>
	   |
	   < tPROCEDURE > | < tIS > | < tREF > | < tEND > | < tRETURN > | < tOF > | <tFUNCTION>
	   |
	   < tSKIP_LN > | < tPUT > | < tPUT_LN > | < tGET > | <tCHAR2INT> | <tINT2CHAR> 
	   |
	   < tPUNTO > |	< tCOMA > |	< tDOSPUNTOS > | < tDOBLEPUNTO > | < tPUNTOCOMA > |	< tCORCHETES_OPEN > | < tCORCHETES_CLOSE > | < tPARENTESIS_OPEN > |	< tPARENTESIS_CLOSE > | < tID >
   )+
   < EOF >
}*/

 
void Programa() : 
{

}
{
	<tPROCEDURE>
	<tID>
	<tIS>
	( declaracion_variables() )?
	( declaracion_procs_funcs() )?
	<tBEGIN>
	instrucciones()
	<tEND>
	<tPUNTOCOMA>
	<EOF>
}
	
void declaracion_procs_funcs() :
{

}
{
	( declaracion_proc_func() )+
}

void declaracion_proc_func() :
{

}
{
	( declaracion_proc() | declaracion_func() )
}

void declaracion_func():
{

}
{
	cabecera_funcion()
	( declaracion_variables() )?
	<tBEGIN>
	instrucciones()
	<tEND>
	<tPUNTOCOMA>
}

void declaracion_proc():
{

}
{
	cabecera_procedimiento() 
	( declaracion_variables() )?
	<tBEGIN>
	instrucciones()
	<tEND>
	<tPUNTOCOMA>
}

void lista_ids():
{

}
{
	<tID> (<tCOMA> <tID>)* 
}

void declaracion_variables() :
{

}
{
	( declaracion_var() )+
}

void declaracion_variables_puntocoma() :
{

}
{
	( declaracion_var_puntocoma() )+
}
		
void tipo_variable() :
{

}
{
	<tBOOL> | <tCHAR> | <tCHARACTER> | <tINTEGER> 
	
}

void rango() :
{

}
{
	<tCONST_INT> <tDOSPUNTOS> <tCONST_INT>
}

void estructura_array():
{

}
{
	<tARRAY> <tPARENTESIS_OPEN> rango() <tPARENTESIS_CLOSE> <tOF> tipo_variable()
}

void declaracion_var_puntocoma():
{
	
}
{
	lista_ids() 
	<tDOBLEPUNTO>
	(<tREF>)?
	( tipo_variable() | estructura_array())
}

void declaracion_var():
{
	
}
{
	lista_ids() 
	<tDOBLEPUNTO>
	( tipo_variable() | estructura_array())
	<tPUNTOCOMA>
}

void lista_parametros_funcion_o_proc():
{

}
{
	declaracion_var_puntocoma() (<tPUNTOCOMA> declaracion_var_puntocoma())*	
}

void cabecera_procedimiento() :
{
	
}
{
	<tPROCEDURE>
	<tID>
	(<tPARENTESIS_OPEN>
	( lista_parametros_funcion_o_proc() )?
	<tPARENTESIS_CLOSE>) ?
	<tIS>
}

void cabecera_funcion() :
{
	
}
{
	<tFUNCTION> 
	<tID>
	(<tPARENTESIS_OPEN>
	( lista_parametros_funcion_o_proc() )?
	<tPARENTESIS_CLOSE>) ?
	<tRETURN> tipo_variable() <tIS>
}

void inst_leer():
{

}
{
	<tGET> <tPARENTESIS_OPEN> lista_ids() <tPARENTESIS_CLOSE>
}

void inst_saltar_linea():
{

}
{
	<tSKIP_LN>
}

void inst_escribir():
{

}
{
	<tPUT> <tPARENTESIS_OPEN>
	lista_una_o_mas_exps()	
	<tPARENTESIS_CLOSE>
}

void inst_escribir_linea():
{

}
{
	<tPUT_LN> 
	(<tPARENTESIS_OPEN> 
	lista_una_o_mas_exps()
	<tPARENTESIS_CLOSE>) ?
}

void inst_invocacion_o_asignacion(): 
{

}
{

	expresion() (<tASIGN> expresion())?

}

void inst_if():
{

}
{
	<tIF> expresion() <tTHEN> instrucciones()
	(<tELIF>  expresion() <tTHEN> instrucciones())*
	(<tELSE> instrucciones())?
	<tEND> <tIF>
	
}

void inst_while():
{

}
{
	<tWHILE> expresion() <tLOOP> 
	instrucciones() 
	<tEND> <tLOOP>
}

void inst_return():
{

}
{
	<tRETURN> expresion()
}

void inst_null():
{

}
{
	<tNULL>
}

void instruccion() :
{

}
{
	( inst_leer() )
|   ( inst_saltar_linea() )
|	( inst_escribir() )
|   ( inst_escribir_linea() )
|   ( inst_invocacion_o_asignacion() )
|   ( inst_if() )
|   ( inst_while() )
|   ( inst_return() )
|   ( inst_null() )
}
	
void instrucciones() :
{

}
{
	(instruccion() <tPUNTOCOMA>)+
}

void expresion() :
{
	
}
{
	relacion()
	( ((<tAND> | <tOR>) relacion())+ )?
}
	
void lista_una_o_mas_exps():
{

}
{
	expresion() (<tCOMA> expresion())* 
	
}

void relacion() :
{
	
}
{
	expresion_simple()
	( operador_relacional() expresion_simple() )?
}
	
	

void operador_relacional() :
{

}
{
	<tEQU> | <tLT> | <tGT> | <tLE> | <tGE> | <tDIF>
}
	

void expresion_simple() :
{

}
{
	( <tSUM> |	<tRES> )? 
	termino()
	( ( <tSUM> | <tRES> ) termino() )*
}
	

void termino() :
{

}
{
	factor() ( operador_multiplicativo() factor() )*
}
	

void operador_multiplicativo() :
{

}
{
	<tMUL> | <tMOD> | <tDIV>
}
	

void factor() :
{

}
{
	primario()
|   <tNOT>  primario()
}
	

void primario() :
{

}
{
	<tPARENTESIS_OPEN> expresion() <tPARENTESIS_CLOSE>
|	<tINT2CHAR> <tPARENTESIS_OPEN> expresion() <tPARENTESIS_CLOSE>
|	<tCHAR2INT> <tPARENTESIS_OPEN> expresion() <tPARENTESIS_CLOSE>
|	LOOKAHEAD(2) <tID> <tPARENTESIS_OPEN> lista_una_o_mas_exps() <tPARENTESIS_CLOSE> //invoc. func. o comp. array
|	<tID>              //var. o func. sin pars
|	<tCONST_INT>
|	<tCONST_CHAR>
|	<tCONST_STRING> //rn sf.primario_8(t);
|	<tTRUE>
|	<tFALSE>
}

