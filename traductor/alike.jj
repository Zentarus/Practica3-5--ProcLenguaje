//*****************************************************************
// File:   cl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   julio 2023
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
	IGNORE_CASE = true;
	COMMON_TOKEN_ACTION = false;
}

// -----------------------------------------------------------------------------


PARSER_BEGIN(alike)

package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;

//...

public class alike {
   //...

   static SymbolTable st;

	private static void initSymbolTable() {
		boolean b;
		String[] palsRes = {
	    	"boolean","char","character", "integer", "null", "array",  
			"mod", "not", "and", "or",
			"if", "elsif", "else", "then", "while", "loop", "true", "false",
			"procedure", "function", "is", "ref", "of", "begin", "end", "return",
			"skip_line", "put", "put_line", "get", "char2int", "int2char"
		};

		//st.insertReservedWords(palsRes);
	}

	private void iterarYanadirEnTablaDeSimbolos(ArrayList<Token> ids, Attributes at){
		for (Token t : ids) {
			if (at.type == Symbol.types.BOOL) {
				s = new SymbolBool(t.image);
				st.insertSymbol(s);		}
			else if (at.type == Symbol.types.INT) {
				s = new SymbolInt(t.image);
				st.insertSymbol(s);(ids);
			}
			else if (at.type == Symbol.types.CHAR) {
				s = new SymbolChar(t.image);
				st.insertSymbol(s);(ids);
			}
			else if (at.type == Symbol.type.ARRAY) {
				s = new SymbolArray(t.image);
				st.insertSymbol(s);(ids);
			} 
		}
	}
   
   public static void main(String[] args) {
	   alike parser = null;
	   
		st = new SymbolTable();
    	initSymbolTable();

	   try {
		   if(args.length == 0) {
			   parser = new alike(System.in);
		   }
		   else {
			   parser = new alike(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el símbolo inicial de la gramática
		   parser.Programa();
		   //...
		   System.out.println("***** Análisis terminado con éxito *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.err.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		   System.err.println("LEX_ERROR: " + e.getMessage());

	   }
	   catch (ParseException e) {
			System.err.println("Parse_exception: " + e.getMessage());
	   }
	   //...
   }
}
PARSER_END(alike)

// ----------------------------------------------------------------------------

TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
|	< #UNDERSCORE: "_" >
}

SKIP : { 
	< tSPACE: " " >
| 	< tNL: "\n" >
|	< tTAB: "\t" >
|	< tENTER: "\r" >
| 	< tCOMENTARIO: "--"(~["\n"])* >
}

TOKEN : { // Tipos
	< tBOOL: "boolean" >
|	< tCHAR: "char" >
|	< tCHARACTER: "character" >
|   < tINTEGER: "integer" >
|	< tNULL: "null" >
|	< tARRAY: "array" >
|	< tCONST_INT: (["0"-"9"])+ >
|	< tCONST_CHAR: "\'"(~["\n","\t","\r","\f","\b","\'","\""] | ("\"\"") | ("\'\'"))"\'" >
| 	< tCONST_STRING: "\""(~["\n","\t","\r","\f","\b","\'","\""] | ("\"\"") | ("\'\'"))*"\"" >
}

TOKEN : { // Operadores
	< tASIGN: ":=" >
|	< tSUM: "+" >
|   < tRES: "-" >
|	< tEQU: "=" >
|	< tGT: ">" >
|	< tLT: "<" >
|	< tGE: ">=" >
|	< tLE: "<=" >
|	< tDIF: "/=" >
|	< tMUL: "*" >
|	< tMOD: "mod" >
|	< tDIV: "/" >
|	< tNOT: "not" >
|	< tAND: "and" >
|	< tOR: "or" >
}

TOKEN : { // Sintaxis reservada estructuras simples
	< tIF: "if" >
|	< tELIF: "elsif" >
|	< tELSE: "else" >
|	< tTHEN: "then" >
|	< tWHILE: "while" >
|	< tLOOP: "loop" >
|	< tTRUE: "true" >
|	< tFALSE: "false" >
}

TOKEN : { // Sintaxis reservada funciones
	< tPROCEDURE: "procedure" >
|	< tFUNCTION: "function" >
|	< tIS: "is" >
|	< tREF: "ref" >
|	< tOF: "of" >
|	< tBEGIN: "begin" >
|	< tEND: "end" >
|	< tRETURN: "return" >
}

TOKEN : { // Instrucciones E/S
	< tSKIP_LN: "skip_line" >
|	< tPUT: "put" >
|	< tPUT_LN: "put_line" >
|	< tGET: "get" >
|	< tCHAR2INT: "char2int" >
|	< tINT2CHAR: "int2char" >
}

TOKEN : { // Separadores
	< tPUNTO: "." >
|	< tCOMA:	"," >
|	< tDOSPUNTOS: ".." >
|	< tDOBLEPUNTO: ":" >
|	< tPUNTOCOMA: ";" >
|	< tCORCHETES_OPEN: "[" >
|	< tCORCHETES_CLOSE: "]" >
|	< tPARENTESIS_OPEN: "(" >
|	< tPARENTESIS_CLOSE: ")" >
|	< tID: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >
}

TOKEN_MGR_DECLS : {
	static void CommonTokenAction(Token t) {

		 String[] nombresTokens = {
			"letra", "digito", "barra baja", "espacio", "fin de linea", "tabulador", "retorno", "comentario",
			"boolean", "char", "character", "integer", "null", "array", "const integer", "const char", "const string",
			"asignacion", "suma", "resta", "comparacion igualdad", "comparacion mayor estricto", "comparacion menor estricto", 
			"comparacion mayor o igual", "comparacion menor o igual", "comparacion diferencia", "multiplicacion", "modulo", "division", "negacion logica", 
			"operador logico", "operador logico", "token", "token", "token", "token", "token", "token", "constante aritmetica", "constante aritmetica", 
			"token", "token", "token", "token", "token", "token", "token", "token", "funcion reservada", "funcion reservada", "funcion reservada", 
			"funcion reservada", "funcion reservada", "funcion reservada", "token separador", "token separador", "token separador", "token separador",
			"token separador", "token separador", "token separador", "token separador", "token separador", "identificador"
		};

		int linea = t.beginLine;
		int columna = t.beginColumn;
		String image = t.image;
		if (t.kind != 0){ // Si es distinto de fin de linea
			System.out.println("(" + linea + "," + columna + "): " + nombresTokens[t.kind-1] + " \"" + image + "\"");
		}
	}
}


//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
/*void Programa() : 
{
	//Token t;
}
{
   ( 
	   < tBEGIN >
	   | 
	   < tBOOL > | < tCHAR > | < tCHARACTER > | < tINTEGER > | < tNULL > | < tARRAY > | < tCONST_INT > | < tCONST_CHAR > | < tCONST_STRING > 
	   |
	   < tASIGN > | < tSUM > | < tRES > | < tEQU > | < tGT > | < tLT > | < tGE > | < tLE > | < tMUL > | < tMOD > | < tDIV > | < tNOT > | < tDIF > | < tAND > | < tOR >
	   |
	   < tIF > | < tELIF > |	< tTHEN > |	< tWHILE > | < tLOOP > | < tTRUE > | < tFALSE > | <tELSE>
	   |
	   < tPROCEDURE > | < tIS > | < tREF > | < tEND > | < tRETURN > | < tOF > | <tFUNCTION>
	   |
	   < tSKIP_LN > | < tPUT > | < tPUT_LN > | < tGET > | <tCHAR2INT> | <tINT2CHAR> 
	   |
	   < tPUNTO > |	< tCOMA > |	< tDOSPUNTOS > | < tDOBLEPUNTO > | < tPUNTOCOMA > |	< tCORCHETES_OPEN > | < tCORCHETES_CLOSE > | < tPARENTESIS_OPEN > |	< tPARENTESIS_CLOSE > | < tID >
   )+
   < EOF >
}*/

 
void Programa() : 
{

}
{
	<tPROCEDURE>
	<tID>
	<tIS>
	( declaracion_variables() )?
	( declaracion_procs_funcs() )?
	<tBEGIN>
	instrucciones()
	<tEND>
	<tPUNTOCOMA>
	<EOF>
}
	
void declaracion_procs_funcs() :
{

}
{
	( declaracion_proc_func() )+
}

void declaracion_proc_func() :
{

}
{
	( declaracion_proc() | declaracion_func() )
}

void declaracion_func():
{

}
{
	cabecera_funcion() {st.insertBlock();}
	( declaracion_variables() )?
	<tBEGIN>
	instrucciones() 
	<tEND>
	<tPUNTOCOMA>
}

void declaracion_proc():
{

}
{
	cabecera_procedimiento() {st.insertBlock();}
	( declaracion_variables() )?
	<tBEGIN>
	instrucciones() 
	<tEND>
	<tPUNTOCOMA>
}

ArrayList<Token> lista_ids():
{
	ArrayList<Token> ids;
	Token t;
}
{

	t = <tID> {ids.add(t);} (<tCOMA> t = <tID> {ids.add(t);})*  //Aceptamos que una lista de ids pueda estar formada por un solo id
}

void declaracion_variables() :
{

}
{
	( declaracion_var() )+
}

void declaracion_variables_puntocoma() :
{

}
{
	( declaracion_var_puntocoma() )+
}
		
void tipo_variable(Attributes at) :
{

}
{
	<tBOOL> { at.type = Symbol.Types.BOOL; }
| 	<tCHAR> { at.type = Symbol.Types.CHAR; }
| 	<tCHARACTER> { at.type = Symbol.Types.CHAR; }
| 	<tINTEGER> { at.type = Symbol.Types.INT; }
	
}

void rango() :
{

}
{
	<tCONST_INT> <tDOSPUNTOS> <tCONST_INT>
}

Type estructura_array(Attributes at):
{

}
{
	<tARRAY> <tPARENTESIS_OPEN> rango() <tPARENTESIS_CLOSE> <tOF> tipo_variable(at)
}

void declaracion_var_puntocoma():
{
	ArrayList<Token> ids;
	Attributes at1 = new Attributes(), at2 = new Attributes();
}
{
	ids = lista_ids() 
	<tDOBLEPUNTO>
	(<tREF>)?
	( tipo_variable(at1) { iterarYanadirEnTablaDeSimbolos(ids,at1);	} | 	
	  estructura_array(at2) { iterarYanadirEnTablaDeSimbolos(ids,at2); })
}

void declaracion_var():
{
	ArrayList<Token> ids;
	Attributes at1 = new Attributes(), at2 = new Attributes();
}
{
	ids = lista_ids() 
	<tDOBLEPUNTO>
	( tipo_variable(at1) { iterarYanadirEnTablaDeSimbolos(ids,at1);	} | 	
	  estructura_array(at2) { iterarYanadirEnTablaDeSimbolos(ids,at2); })
	<tPUNTOCOMA>
}

void lista_parametros_funcion_o_proc():
{

}
{
	declaracion_var_puntocoma() (<tPUNTOCOMA> declaracion_var_puntocoma())*	
}

void cabecera_procedimiento(Attributes at) :
{
	Token t;
	Attributes at1 = new Attributes(), at2 = new Attributes();
}
{
	<tPROCEDURE>
	t = <tID> {
		at.parList = new ArrayList<Symbol>();
		s = new SymbolFunction(t.image,at.parList,at1.type);
		try {
			st.insertSymbol(s);	
		}
		catch (AlreadyDefinedSymbolException e) {
			//error
		}
		st.insertBlock();
		at2.parList = at1.parList;
	}
	<tPARENTESIS_OPEN>
	( lista_parametros_funcion_o_proc(at2) )?
	<tPARENTESIS_CLOSE>
	<tIS> {at.type = at1.type;}
}

void cabecera_funcion(Attributes at) :
{

	Token t;
	Attributes at1 = new Attributes(), at2 = new Attributes();

}
{
	<tFUNCTION> 
	t = <tID> {
		at.parList = new ArrayList<Symbol>();
		s = new SymbolFunction(t.image, at.parList, at1.type);
		try {
			st.insertSymbol(s);
		}
		catch (AlreadyDefinedSymbolException e) {
			// error
		}
		st.insertBlock();
		at2.parList = at.parList;
	}
	<tPARENTESIS_OPEN>
	( lista_parametros_funcion_o_proc(at2) )?
	<tPARENTESIS_CLOSE>
	<tRETURN> tipo_variable(at1) <tIS> {at.type = at1.type; }
}

void inst_leer():
{

}
{
	<tGET> <tPARENTESIS_OPEN> lista_ids() <tPARENTESIS_CLOSE>
}

void inst_saltar_linea():
{

}
{
	<tSKIP_LN>
}

void inst_escribir():
{

}
{
	<tPUT> <tPARENTESIS_OPEN>
	lista_una_o_mas_exps()
	<tPARENTESIS_CLOSE>
}

void inst_escribir_linea(): 
{

}
{
	<tPUT_LN> 
	(<tPARENTESIS_OPEN> 
	lista_una_o_mas_exps()
	<tPARENTESIS_CLOSE>) ?
}

void inst_invocacion_o_asignacion(Attributes at): 
{
	Token t;
	Attributes at1 = new Attributes(), at2 = new Attributes();
}
{
	expresion() (<tASIGN> expresion()) ? // Completar parte de práctica 3

}

void inst_if():
{

}
{
	<tIF> expresion() <tTHEN> instrucciones()
	(<tELIF>  expresion() <tTHEN> instrucciones())*
	(<tELSE> instrucciones())?
	<tEND> <tIF>
	
}

void inst_while():
{

}
{
	<tWHILE> expresion() <tLOOP> 
	instrucciones() 
	<tEND> <tLOOP>
}

void inst_return():
{

}
{
	<tRETURN> expresion()
}

void inst_null():
{

}
{
	<tNULL>
}

void instruccion() :
{

}
{
	( inst_leer() )
|   ( inst_saltar_linea() )
|	( inst_escribir() )
|   ( inst_escribir_linea() )
|   ( inst_invocacion_o_asignacion() )
|   ( inst_if() )
|   ( inst_while() )
|   ( inst_return() )
|   ( inst_null() )
}
	
void instrucciones() :
{

}
{
	(instruccion() <tPUNTOCOMA>)+
}

void expresion() :
{
	
}
{
	relacion()
	( ((<tAND> | <tOR>) relacion())+ )?
}
	
void lista_una_o_mas_exps():
{

}
{
	(expresion() <tCOMA>)* expresion()
	
}

void relacion(Attibutes at) :
{
	Token t;
	Attributes at1 = new Attributes(), at2 = new Attributes(), at3 = new Attributes();
}
{
	expresion_simple(at1) 
	{
		at.type = at1.type;
		at.parClass = at1.parClass;
		at.parList = at1.parList;
	}
	( 
	operador_relacional(at2) 
	expresion_simple(at3) 
	{
		if (at1.type == at3.type) {
			at.type = Symbol.Types.BOOL;
		}
		else {
			at.type = Symbol.Types.UNDEFINED;
			//error, no devolverá booleano si no se puede comparar
		}
		//completar los atributos de at
	} 
	)?
}
	
	

void operador_relacional(Attributes at) :
{
	
}
{
	<tEQU> | <tLT> | <tGT> | <tLE> | <tGE> | <tDIF>
}
	

void expresion_simple() :
{

}
{
	( <tSUM> |	<tRES> )? 
	termino()
	( ( <tSUM> | <tRES> ) termino() )*
}
	

void termino() :
{

}
{
	factor() ( operador_multiplicativo() factor() )*
}
	

void operador_multiplicativo() :
{

}
{
	<tMUL> | <tMOD> | <tDIV>
}
	

void factor() :
{

}
{
	primario() 
|	<tNOT> primario() 

}
	

void primario(Atributos at) :
{

}
{
	<tPARENTESIS_OPEN> expresion() <tPARENTESIS_CLOSE>
|	<tINT2CHAR> <tPARENTESIS_OPEN> expresion() <tPARENTESIS_CLOSE>
|	<tCHAR2INT> <tPARENTESIS_OPEN> expresion() <tPARENTESIS_CLOSE>
|	LOOKAHEAD(2) <tID> <tPARENTESIS_OPEN> lista_una_o_mas_exps() <tPARENTESIS_CLOSE> { //invoc. func. o comp. array
		Symbol s = null;
		try {
			s = st.getSymbol(t.image);
			if (!(s instanceof SymbolFunction)) {
				errSem.deteccion("Se esperaba función ...");
			}
		}
		catch (SymbolNotFoundException e) {
			errSem.deteccion(e, t);
		}
		at.isVar = false;
		at.type = ((SymbolFunction)s).returnType;
		// Procesar la lista de parametros reales ...
		...
	}
|	t = <tID> {             //var. o func. sin pars
		Symbol s = null;
		try {
			s = st.getSymbol(t.image);
		}
		catch (SymbolNotFoundException e) {
			errSem.deteccion(e, t);
		}
		at.isVar = true;
		at.type = s.type;
	}
|	<tCONST_INT>
|	<tCONST_CHAR>
|	<tCONST_STRING> //rn sf.primario_8(t);
|	<tTRUE>
|	<tFALSE>
}

