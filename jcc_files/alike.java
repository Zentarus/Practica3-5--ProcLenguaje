/* alike.java */
/* Generated By:JavaCC: Do not edit this line. alike.java */
package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.attributes.*;
import java.util.ArrayList;
import lib.errores.ErrorSemantico;

//...

public class alike implements alikeConstants {
   //...

   static SymbolTable st;

        private static void initSymbolTable() {
                boolean b;
                String[] palsRes = {
                "boolean","char","character", "integer", "null", "array",
                        "mod", "not", "and", "or",
                        "if", "elsif", "else", "then", "while", "loop", "true", "false",
                        "procedure", "function", "is", "ref", "of", "begin", "end", "return",
                        "skip_line", "put", "put_line", "get", "char2int", "int2char"
                };

                //st.insertReservedWords(palsRes);
        }

        private static void iterarYanadirEnTablaDeSimbolos(ArrayList<Token> ids, Attributes at){
                Symbol s = null;
                for (Token t : ids) {
                        if (at.isArray) {
                                s = new SymbolArray(t.image, at.intList.get(0), at.intList.get(1), at.type, at.parClass);
                                at.parList.add(s);
                        }
                        else {
                                if (at.type == Symbol.Types.BOOL) {
                                        s = new SymbolBool(t.image, at.parClass);
                                        at.parList.add(s);
                                }
                                else if (at.type == Symbol.Types.INT) {
                                        s = new SymbolInt(t.image, at.parClass);
                                        at.parList.add(s);
                                }
                                else if (at.type == Symbol.Types.CHAR) {
                                        s = new SymbolChar(t.image, at.parClass);
                                        at.parList.add(s);
                                }
                        }
                        try {
                                st.insertSymbol(s);
                        }
                        catch(AlreadyDefinedSymbolException e) {
                                System.err.println("Already Defined: " + e.getMessage());
                        }
                }
        }

   public static void main(String[] args) {
           alike parser = null;

                st = new SymbolTable();
        initSymbolTable();

           try {
                   if(args.length == 0) {
                           parser = new alike(System.in);
                   }
                   else {
                           parser = new alike(new java.io.FileInputStream(args[0]));
                   }
                   //Programa es el símbolo inicial de la gramática
                   parser.Programa();
                   //...
                   System.out.println("***** An\u00e1lisis terminado con \u00e9xito *****");
           }
           catch (java.io.FileNotFoundException e) {
                   System.err.println ("Fichero " + args[0] + " no encontrado.");
           }
           catch (TokenMgrError e) {
                   System.err.println("LEX_ERROR: " + e.getMessage());

           }
           catch (ParseException e) {
                        System.err.println("Parse_exception: " + e.getMessage());
           }
           //...
   }

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
/*void Programa() : 
{
	//Token t;
}
{
   ( 
	   < tBEGIN >
	   | 
	   < tBOOL > | < tCHAR > | < tCHARACTER > | < tINTEGER > | < tNULL > | < tARRAY > | < tCONST_INT > | < tCONST_CHAR > | < tCONST_STRING > 
	   |
	   < tASIGN > | < tSUM > | < tRES > | < tEQU > | < tGT > | < tLT > | < tGE > | < tLE > | < tMUL > | < tMOD > | < tDIV > | < tNOT > | < tDIF > | < tAND > | < tOR >
	   |
	   < tIF > | < tELIF > |	< tTHEN > |	< tWHILE > | < tLOOP > | < tTRUE > | < tFALSE > | <tELSE>
	   |
	   < tPROCEDURE > | < tIS > | < tREF > | < tEND > | < tRETURN > | < tOF > | <tFUNCTION>
	   |
	   < tSKIP_LN > | < tPUT > | < tPUT_LN > | < tGET > | <tCHAR2INT> | <tINT2CHAR> 
	   |
	   < tPUNTO > |	< tCOMA > |	< tDOSPUNTOS > | < tDOBLEPUNTO > | < tPUNTOCOMA > |	< tCORCHETES_OPEN > | < tCORCHETES_CLOSE > | < tPARENTESIS_OPEN > |	< tPARENTESIS_CLOSE > | < tID >
   )+
   < EOF >
}*/
  static final public 

void Programa() throws ParseException {
    trace_call("Programa");
    try {
Token t;
        Attributes at = new Attributes();
      jj_consume_token(tPROCEDURE);
      t = jj_consume_token(tID);
Symbol s;
                at.parList = new ArrayList<Symbol>();
                s = new SymbolProcedure(t.image,at.parList,true);
                try {
                        st.insertSymbol(s);
                }
                catch (AlreadyDefinedSymbolException e) {
                        ErrorSemantico.deteccion(e, t.image);
                }
      jj_consume_token(tIS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        declaracion_variables();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:
      case tFUNCTION:{
        declaracion_procs_funcs();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(tBEGIN);
      instrucciones();
      jj_consume_token(tEND);
      jj_consume_token(tPUNTOCOMA);
System.err.println(st.toString());
                st.removeBlock();
      jj_consume_token(0);
    } finally {
      trace_return("Programa");
    }
}

  static final public void declaracion_procs_funcs() throws ParseException {
    trace_call("declaracion_procs_funcs");
    try {

      label_1:
      while (true) {
        declaracion_proc_func();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tPROCEDURE:
        case tFUNCTION:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
    } finally {
      trace_return("declaracion_procs_funcs");
    }
}

  static final public void declaracion_proc_func() throws ParseException {
    trace_call("declaracion_proc_func");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:{
        declaracion_proc();
        break;
        }
      case tFUNCTION:{
        declaracion_func();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("declaracion_proc_func");
    }
}

  static final public void declaracion_func() throws ParseException {
    trace_call("declaracion_func");
    try {
Attributes at = new Attributes();
      cabecera_funcion(at);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        declaracion_variables();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(tBEGIN);
      instrucciones_return();
      jj_consume_token(tEND);
      jj_consume_token(tPUNTOCOMA);
System.err.println(st.toString());
                st.removeBlock();
    } finally {
      trace_return("declaracion_func");
    }
}

  static final public void declaracion_proc() throws ParseException {
    trace_call("declaracion_proc");
    try {
Attributes at = new Attributes();
      cabecera_procedimiento(at);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        declaracion_variables();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(tBEGIN);
      instrucciones();
      jj_consume_token(tEND);
      jj_consume_token(tPUNTOCOMA);
System.err.println(st.toString());
                st.removeBlock();
    } finally {
      trace_return("declaracion_proc");
    }
}

  static final public ArrayList<Token> lista_ids() throws ParseException {
    trace_call("lista_ids");
    try {
ArrayList<Token> ids = new ArrayList<Token>();
        Token t;
      t = jj_consume_token(tID);
ids.add(t);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMA:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
        jj_consume_token(tCOMA);
        t = jj_consume_token(tID);
ids.add(t);
      }
{if ("" != null) return ids;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_ids");
    }
}

  static final public void declaracion_variables() throws ParseException {
    trace_call("declaracion_variables");
    try {

      label_3:
      while (true) {
        declaracion_var();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
      }
    } finally {
      trace_return("declaracion_variables");
    }
}

  static final public void declaracion_variables_puntocoma() throws ParseException {
    trace_call("declaracion_variables_puntocoma");
    try {
Attributes at = new Attributes();
      label_4:
      while (true) {
        declaracion_var_puntocoma(at);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
      }
    } finally {
      trace_return("declaracion_variables_puntocoma");
    }
}

  static final public void tipo_variable(Attributes at) throws ParseException {
    trace_call("tipo_variable");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tBOOL:{
        jj_consume_token(tBOOL);
at.type = Symbol.Types.BOOL;
        break;
        }
      case tCHAR:{
        jj_consume_token(tCHAR);
at.type = Symbol.Types.CHAR;
        break;
        }
      case tCHARACTER:{
        jj_consume_token(tCHARACTER);
at.type = Symbol.Types.CHAR;
        break;
        }
      case tINTEGER:{
        jj_consume_token(tINTEGER);
at.type = Symbol.Types.INT;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipo_variable");
    }
}

  static final public void rango(Attributes at) throws ParseException {
    trace_call("rango");
    try {
Token t1, t2;
      t1 = jj_consume_token(tCONST_INT);
      jj_consume_token(tDOSPUNTOS);
      t2 = jj_consume_token(tCONST_INT);
Integer inicio,fin;
                inicio = Integer.valueOf(t1.image);
                fin = Integer.valueOf(t2.image);
                if(inicio > fin) {
                        ErrorSemantico.deteccion("Rango invalido");
                }
                else {
                        at.intList.add(inicio);
                        at.intList.add(fin);
                }
    } finally {
      trace_return("rango");
    }
}

  static final public void estructura_array(Attributes at) throws ParseException {
    trace_call("estructura_array");
    try {

      jj_consume_token(tARRAY);
      jj_consume_token(tPARENTESIS_OPEN);
      rango(at);
      jj_consume_token(tPARENTESIS_CLOSE);
      jj_consume_token(tOF);
      tipo_variable(at);
at.isArray = true;
                // Faltarían más cosas de atribuir a at?

    } finally {
      trace_return("estructura_array");
    }
}

  static final public void declaracion_var_puntocoma(Attributes at) throws ParseException {
    trace_call("declaracion_var_puntocoma");
    try {
ArrayList<Token> ids;
        Attributes at1 = new Attributes(), at2 = new Attributes();
        Symbol s;
      ids = lista_ids();
      jj_consume_token(tDOBLEPUNTO);
at1.parClass = Symbol.ParameterClass.VAL;
                at2.parClass = Symbol.ParameterClass.VAL;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tREF:{
        jj_consume_token(tREF);
at1.parClass = Symbol.ParameterClass.REF;
                at2.parClass = Symbol.ParameterClass.REF;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tBOOL:
      case tCHAR:
      case tCHARACTER:
      case tINTEGER:{
        tipo_variable(at1);
iterarYanadirEnTablaDeSimbolos(ids,at1);
                  at.parList = at1.parList;
        break;
        }
      case tARRAY:{
        estructura_array(at2);
iterarYanadirEnTablaDeSimbolos(ids,at2);
                  at.parList = at2.parList;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("declaracion_var_puntocoma");
    }
}

  static final public void declaracion_var() throws ParseException {
    trace_call("declaracion_var");
    try {
ArrayList<Token> ids;
        Attributes at1 = new Attributes(), at2 = new Attributes();
      ids = lista_ids();
      jj_consume_token(tDOBLEPUNTO);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tBOOL:
      case tCHAR:
      case tCHARACTER:
      case tINTEGER:{
        tipo_variable(at1);
iterarYanadirEnTablaDeSimbolos(ids,at1);
        break;
        }
      case tARRAY:{
        estructura_array(at2);
iterarYanadirEnTablaDeSimbolos(ids,at2);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(tPUNTOCOMA);
    } finally {
      trace_return("declaracion_var");
    }
}

  static final public void lista_parametros_funcion_o_proc(Attributes at) throws ParseException {
    trace_call("lista_parametros_funcion_o_proc");
    try {
Attributes at1 = new Attributes(), at2 = new Attributes();
      declaracion_var_puntocoma(at1);
for (Symbol s : at1.parList) {
                        at.parList.add(s);
                }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tPUNTOCOMA:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        jj_consume_token(tPUNTOCOMA);
        declaracion_var_puntocoma(at2);
for (Symbol s : at2.parList) {
                                at.parList.add(s);
                        }
      }
    } finally {
      trace_return("lista_parametros_funcion_o_proc");
    }
}

  static final public void cabecera_procedimiento(Attributes at) throws ParseException {
    trace_call("cabecera_procedimiento");
    try {
Token t;
        Attributes at1 = new Attributes(), at2 = new Attributes();
      jj_consume_token(tPROCEDURE);
      t = jj_consume_token(tID);
Symbol s;
                at.parList = new ArrayList<Symbol>();
                s = new SymbolProcedure(t.image,at.parList);
                try {
                        st.insertSymbol(s);
                        st.insertBlock();
                }
                catch (AlreadyDefinedSymbolException e) {
                        ErrorSemantico.deteccion(e,t.image);
                }

                at2.parList = at1.parList;
      jj_consume_token(tPARENTESIS_OPEN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        lista_parametros_funcion_o_proc(at2);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
try {
                        Symbol aux = st.getSymbol(t.image);
                        if (aux instanceof SymbolProcedure) {
                                //System.err.println("Procedimiento");
                                SymbolProcedure procedure = (SymbolProcedure) aux;
                                procedure.parList = at2.parList;
                        }
                }
                catch (SymbolNotFoundException e) {
                        ErrorSemantico.deteccion(e,t.image);
                }
      jj_consume_token(tPARENTESIS_CLOSE);
      jj_consume_token(tIS);
    } finally {
      trace_return("cabecera_procedimiento");
    }
}

  static final public void cabecera_funcion(Attributes at) throws ParseException {
    trace_call("cabecera_funcion");
    try {
Token t;
        Attributes at1 = new Attributes(), at2 = new Attributes();
      jj_consume_token(tFUNCTION);
      t = jj_consume_token(tID);
Symbol s;
                at.parList = new ArrayList<Symbol>();
                s = new SymbolFunction(t.image, at.parList, at1.type);
                try {
                        st.insertSymbol(s);
                        st.insertBlock();
                }
                catch (AlreadyDefinedSymbolException e) {
                        ErrorSemantico.deteccion(e,t.image);
                }
                at2.parList = at.parList;
      jj_consume_token(tPARENTESIS_OPEN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        lista_parametros_funcion_o_proc(at2);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(tPARENTESIS_CLOSE);
      jj_consume_token(tRETURN);
      tipo_variable(at1);
      jj_consume_token(tIS);
try {
                        Symbol aux = st.getSymbol(t.image);
                        if (aux instanceof SymbolFunction) {
                                //System.err.println("Funcion");
                                SymbolFunction funcion = (SymbolFunction) aux;
                                funcion.returnType = at1.type;
                                funcion.parList = at2.parList;
                        }
                }
                catch (SymbolNotFoundException e) {
                        ErrorSemantico.deteccion(e, t.image);
                }
    } finally {
      trace_return("cabecera_funcion");
    }
}

  static final public void inst_leer() throws ParseException {
    trace_call("inst_leer");
    try {
ArrayList<Token> ids;
      jj_consume_token(tGET);
      jj_consume_token(tPARENTESIS_OPEN);
      ids = lista_ids();
for(Token t : ids) {
                        try {
                                Symbol s = st.getSymbol(t.image);
                                if (!((s.type == Symbol.Types.CHAR) || (s.type == Symbol.Types.INT))) {
                                        ErrorSemantico.deteccion("Se esperaba caracter o entero <inst_leer>");
                                }
                        }
                        catch(SymbolNotFoundException e){
                                ErrorSemantico.deteccion(e, t.image);
                        }
                }
      jj_consume_token(tPARENTESIS_CLOSE);
    } finally {
      trace_return("inst_leer");
    }
}

  static final public void inst_saltar_linea() throws ParseException {
    trace_call("inst_saltar_linea");
    try {

      jj_consume_token(tSKIP_LN);
    } finally {
      trace_return("inst_saltar_linea");
    }
}

  static final public void inst_escribir() throws ParseException {
    trace_call("inst_escribir");
    try {
ArrayList<Attributes> ats = new ArrayList<Attributes>();
      jj_consume_token(tPUT);
      jj_consume_token(tPARENTESIS_OPEN);
      lista_una_o_mas_exps(ats);
for (Attributes at : ats) {
                        if (!((at.type == Symbol.Types.INT) || (at.type == Symbol.Types.BOOL) ||
                              (at.type == Symbol.Types.CHAR) || (at.type == Symbol.Types.STRING))) {
                                ErrorSemantico.deteccion("Se esperaba entero, booleano, caracter o string <inst_escribir>");
                        }
                }
      jj_consume_token(tPARENTESIS_CLOSE);
    } finally {
      trace_return("inst_escribir");
    }
}

  static final public void inst_escribir_linea() throws ParseException {
    trace_call("inst_escribir_linea");
    try {
ArrayList<Attributes> ats = new ArrayList<Attributes>();
      jj_consume_token(tPUT_LN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPARENTESIS_OPEN:{
        jj_consume_token(tPARENTESIS_OPEN);
        lista_una_o_mas_exps(ats);
for (Attributes at : ats) {
                        if (!((at.type == Symbol.Types.INT) || (at.type == Symbol.Types.BOOL)
                        || (at.type == Symbol.Types.CHAR) || (at.type == Symbol.Types.STRING))) {
                                ErrorSemantico.deteccion("Se esperaba entero, booleano, caracter o string <inst_escribir_linea>");
                        }
                }
        jj_consume_token(tPARENTESIS_CLOSE);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } finally {
      trace_return("inst_escribir_linea");
    }
}

  static final public void inst_invocacion_o_asignacion(Attributes at) throws ParseException {
    trace_call("inst_invocacion_o_asignacion");
    try {
Attributes at1 = new Attributes(), at2 = new Attributes();
      expresion(at1);
try {
                        Symbol s = st.getSymbol(at1.name);
                        if ((s instanceof SymbolProcedure) && (((SymbolProcedure) s).principal)) {
                                ErrorSemantico.deteccion("El procedimiento principal no es invocable");
                        }
                }
                catch(SymbolNotFoundException e){
                        ErrorSemantico.deteccion(e, at1.name);
                }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tASIGN:{
        jj_consume_token(tASIGN);
        expresion(at2);
Symbol s = null, s2 = null;
                System.out.println("----------->" + at1.name);
                System.out.println("----------->" + at2.name);
                try {
                        s = st.getSymbol(at1.name);
                        s2 = st.getSymbol(at2.name);
                        System.out.println("----------->" + s.toString());
                        System.out.println("----------->" + s2.toString());

                        // Funciones y procedimientos no pueden ser asignables.
                        if (s instanceof SymbolFunction || s instanceof SymbolProcedure) {
                                ErrorSemantico.deteccion("Funcion o procedimiento no son asignables");
                        }
                        else if (s2 instanceof SymbolProcedure) {
                                ErrorSemantico.deteccion("No se puede asignar un procedimiento");
                        }
                        else if (s2 instanceof SymbolFunction){
                                // Si variable es escalar y tipos at1 y at2 iguales -> OK
                                // Doy por asumido que escalares agrupa tmb char, string y bool
                                if(!((at1.type == Symbol.Types.INT || at1.type == Symbol.Types.CHAR ||
                            at1.type == Symbol.Types.BOOL) && at1.type == ((SymbolFunction)s2).returnType)){
                                        ErrorSemantico.deteccion("Asignacion con tipos distintos");
                                }
                                // Si es una componente de vector y tipos at1 y at2 iguales -> OK
                                if(!(at1.isVecComp && (((SymbolArray) s).baseType == ((SymbolFunction)s2).returnType))){
                                        ErrorSemantico.deteccion("La componente del vector no es del tipo del vector");
                                }
                        }
                        else {
                                // Si variable es escalar y tipos at1 y at2 iguales -> OK
                                // Doy por asumido que escalares agrupa tmb char, string y bool
                                if(!((at1.type == Symbol.Types.INT || at1.type == Symbol.Types.CHAR ||
                            at1.type == Symbol.Types.BOOL) && at1.type == at2.type)){
                                        ErrorSemantico.deteccion("Asignacion con tipos distintos");
                                }
                                // Si es una componente de vector y tipos at1 y at2 iguales -> OK
                                if(!(at1.isVecComp && (((SymbolArray) s).baseType == at2.type))){
                                        ErrorSemantico.deteccion("La componente del vector no es del tipo del vector");
                                }
                        }

                }
                catch (SymbolNotFoundException e){
                        ErrorSemantico.deteccion(e, at1.name);
                }
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    } finally {
      trace_return("inst_invocacion_o_asignacion");
    }
}

  static final public void inst_if() throws ParseException {
    trace_call("inst_if");
    try {
Attributes at1 = new Attributes(), at2 = new Attributes();
      jj_consume_token(tIF);
      expresion(at1);
if (at1.type != Symbol.Types.BOOL) {
                        ErrorSemantico.deteccion("Se esperaba booleano <if>");
                }
      jj_consume_token(tTHEN);
      instrucciones_return();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tELIF:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_6;
        }
        jj_consume_token(tELIF);
        expresion(at2);
if (at2.type != Symbol.Types.BOOL) {
                        ErrorSemantico.deteccion("Se esperaba booleano <elif>");
                }
        jj_consume_token(tTHEN);
        instrucciones_return();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tELSE:{
        jj_consume_token(tELSE);
        instrucciones_return();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(tEND);
      jj_consume_token(tIF);
    } finally {
      trace_return("inst_if");
    }
}

  static final public void inst_while() throws ParseException {
    trace_call("inst_while");
    try {
Attributes at = new Attributes();
      jj_consume_token(tWHILE);
      expresion(at);
      jj_consume_token(tLOOP);
      instrucciones_return();
      jj_consume_token(tEND);
      jj_consume_token(tLOOP);
    } finally {
      trace_return("inst_while");
    }
}

  static final public void inst_return() throws ParseException {
    trace_call("inst_return");
    try {
Attributes at = new Attributes();
      jj_consume_token(tRETURN);
      expresion(at);
if (!((at.type == Symbol.Types.INT) || (at.type == Symbol.Types.BOOL) || (at.type == Symbol.Types.CHAR))){
                        String _error = "Tipo incompatible a devolver en return, (" + at.type.toString() + ") <inst_return>";
                        ErrorSemantico.deteccion(_error);
                }
    } finally {
      trace_return("inst_return");
    }
}

  static final public void inst_null() throws ParseException {
    trace_call("inst_null");
    try {

      jj_consume_token(tNULL);
    } finally {
      trace_return("inst_null");
    }
}

  static final public void instruccion_return() throws ParseException {
    trace_call("instruccion_return");
    try {
Attributes at = new Attributes();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tGET:{
        inst_leer();
        break;
        }
      case tSKIP_LN:{
        inst_saltar_linea();
        break;
        }
      case tPUT:{
        inst_escribir();
        break;
        }
      case tPUT_LN:{
        inst_escribir_linea();
        break;
        }
      case tCONST_INT:
      case tCONST_CHAR:
      case tCONST_STRING:
      case tSUM:
      case tRES:
      case tNOT:
      case tTRUE:
      case tFALSE:
      case tCHAR2INT:
      case tINT2CHAR:
      case tPARENTESIS_OPEN:
      case tID:{
        inst_invocacion_o_asignacion(at);
        break;
        }
      case tIF:{
        inst_if();
        break;
        }
      case tWHILE:{
        inst_while();
        break;
        }
      case tRETURN:{
        inst_return();
        break;
        }
      case tNULL:{
        inst_null();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("instruccion_return");
    }
}

  static final public void instruccion() throws ParseException {
    trace_call("instruccion");
    try {
Attributes at = new Attributes();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tGET:{
        inst_leer();
        break;
        }
      case tSKIP_LN:{
        inst_saltar_linea();
        break;
        }
      case tPUT:{
        inst_escribir();
        break;
        }
      case tPUT_LN:{
        inst_escribir_linea();
        break;
        }
      case tCONST_INT:
      case tCONST_CHAR:
      case tCONST_STRING:
      case tSUM:
      case tRES:
      case tNOT:
      case tTRUE:
      case tFALSE:
      case tCHAR2INT:
      case tINT2CHAR:
      case tPARENTESIS_OPEN:
      case tID:{
        inst_invocacion_o_asignacion(at);
        break;
        }
      case tIF:{
        inst_if();
        break;
        }
      case tWHILE:{
        inst_while();
        break;
        }
      case tNULL:{
        inst_null();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("instruccion");
    }
}

  static final public void instrucciones() throws ParseException {
    trace_call("instrucciones");
    try {

      label_7:
      while (true) {
        instruccion();
        jj_consume_token(tPUNTOCOMA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tNULL:
        case tCONST_INT:
        case tCONST_CHAR:
        case tCONST_STRING:
        case tSUM:
        case tRES:
        case tNOT:
        case tIF:
        case tWHILE:
        case tTRUE:
        case tFALSE:
        case tSKIP_LN:
        case tPUT:
        case tPUT_LN:
        case tGET:
        case tCHAR2INT:
        case tINT2CHAR:
        case tPARENTESIS_OPEN:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_7;
        }
      }
    } finally {
      trace_return("instrucciones");
    }
}

  static final public void instrucciones_return() throws ParseException {
    trace_call("instrucciones_return");
    try {

      label_8:
      while (true) {
        instruccion_return();
        jj_consume_token(tPUNTOCOMA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tNULL:
        case tCONST_INT:
        case tCONST_CHAR:
        case tCONST_STRING:
        case tSUM:
        case tRES:
        case tNOT:
        case tIF:
        case tWHILE:
        case tTRUE:
        case tFALSE:
        case tRETURN:
        case tSKIP_LN:
        case tPUT:
        case tPUT_LN:
        case tGET:
        case tCHAR2INT:
        case tINT2CHAR:
        case tPARENTESIS_OPEN:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_8;
        }
      }
    } finally {
      trace_return("instrucciones_return");
    }
}

  static final public void expresion(Attributes at) throws ParseException {
    trace_call("expresion");
    try {
Attributes at1 = new Attributes(), at2 = new Attributes();
      relacion(at1);
at.type = at1.type;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAND:
      case tOR:{
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tAND:{
            jj_consume_token(tAND);
            break;
            }
          case tOR:{
            jj_consume_token(tOR);
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          relacion(at2);
if (!((at1.type == at2.type) && (at1.type == Symbol.Types.BOOL))) {
                        at.type = Symbol.Types.UNDEFINED;
                        ErrorSemantico.deteccion("Se esperaban booleanos");
                }
                else{
                        at.type = at1.type;
                }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tAND:
          case tOR:{
            ;
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            break label_9;
          }
        }
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } finally {
      trace_return("expresion");
    }
}

  static final public void lista_una_o_mas_exps(ArrayList<Attributes> ats) throws ParseException {
    trace_call("lista_una_o_mas_exps");
    try {
Attributes at1 = new Attributes(), at2 = new Attributes();
      expresion(at1);
ats.add(at1);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMA:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_10;
        }
        jj_consume_token(tCOMA);
        expresion(at2);
ats.add(at2);
      }
    } finally {
      trace_return("lista_una_o_mas_exps");
    }
}

/* CREO QUE ESTÁ COMPLETADA, SI FALTA ALGO SERÍA COMPLETAR VALORES DE at */
  static final public void relacion(Attributes at) throws ParseException {
    trace_call("relacion");
    try {
Attributes at1 = new Attributes(), at2 = new Attributes(), at3 = new Attributes();
      expresion_simple(at1);
at.name = at1.name;
                at.type = at1.type;
                at.isConst = at1.isConst;
                at.isVar = at1.isVar;
                at.isVecComp = at1.isVecComp;
                //at.parClass = at1.parClass;
                //at.parList = at1.parList;

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tEQU:
      case tGT:
      case tLT:
      case tGE:
      case tLE:
      case tDIF:{
        operador_relacional(at2);
        expresion_simple(at3);
if (at1.type == at3.type) {
                        at.type = Symbol.Types.BOOL;
                }
                else {
                        at.type = Symbol.Types.UNDEFINED;
                        ErrorSemantico.deteccion("Tipos incompatibles ...");
                }
                at.isVar = false;
                at.isVecComp = false;
                at.isConst = true; // Me imagino que True y False son constantes no?

        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } finally {
      trace_return("relacion");
    }
}

  static final public void operador_relacional(Attributes at) throws ParseException {
    trace_call("operador_relacional");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tEQU:{
        jj_consume_token(tEQU);
        break;
        }
      case tLT:{
        jj_consume_token(tLT);
        break;
        }
      case tGT:{
        jj_consume_token(tGT);
        break;
        }
      case tLE:{
        jj_consume_token(tLE);
        break;
        }
      case tGE:{
        jj_consume_token(tGE);
        break;
        }
      case tDIF:{
        jj_consume_token(tDIF);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("operador_relacional");
    }
}

/* COMPLETA */
// En 'termino' sólo se comprueba si es int cuando se detecta que hay operaciones con mul, div o mod
// En el caso de que 'termino' solo sea un factor, no se comprueba el tipo, por eso se comprueba en 
// esta función, porque podríamos recibir cualquier tipo de dato.
// Creo que se podría comprobar directamente en la función 'termino' que factor(at1) sea entero y así
// ya no tendríamos que comprobar nada en 'expresion_simple' pues siempre 'termino' será un int.
  static final public void expresion_simple(Attributes at) throws ParseException {
    trace_call("expresion_simple");
    try {
Attributes at1 = new Attributes(), at2 = new Attributes();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSUM:
      case tRES:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tSUM:{
          jj_consume_token(tSUM);
          break;
          }
        case tRES:{
          jj_consume_token(tRES);
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      termino(at1);
at.name = at1.name;
                at.type = at1.type;
                at.isConst = at1.isConst;
                at.isVar = at1.isVar;
                at.isVecComp = at1.isVecComp;
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tSUM:
        case tRES:{
          ;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tSUM:{
          jj_consume_token(tSUM);
          break;
          }
        case tRES:{
          jj_consume_token(tRES);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        termino(at2);
if (at1.type != Symbol.Types.INT) {
                        // error: El primer termino no es un entero
                        ErrorSemantico.deteccion("El primer termino no es un entero");
                        System.err.println(at1.type);
                        System.err.println(at1.name);
                }
                if ((at2.type != at1.type) || (at2.type != Symbol.Types.INT)){
                        // error: Los tipos de terminos no coinciden o at2 no es entero
                        ErrorSemantico.deteccion("Terminos no coinciden, segundo temrino no es un entero");
                }
      }
    } finally {
      trace_return("expresion_simple");
    }
}

/* CREO QUE COMPLETADA */
  static final public void termino(Attributes at) throws ParseException {
    trace_call("termino");
    try {
Attributes at1 = new Attributes(), at2 = new Attributes();
      factor(at1);
at.name = at1.name; at.type = at1.type; System.out.println("Tipo: " + at.type);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tMUL:
        case tMOD:
        case tDIV:{
          ;
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          break label_12;
        }
        operador_multiplicativo();
// Aparece una operación de mul, div o mod, por lo tanto comprobamos
                        // que at1 sea entero.
                        if (at1.type != Symbol.Types.INT) {
                                // error: El primer factor no es un entero
                                ErrorSemantico.deteccion("El primer factor no es un entero");
                        }
        factor(at2);
// Comprobamos que at2 es mismo tipo que at1, que deberá ser un entero.
                        if((at2.type != at1.type) || (at2.type != Symbol.Types.INT)) {
                                // error: Los tipos de factores no coinciden o at2 no es entero
                                ErrorSemantico.deteccion("Los tipos de factores no coinciden");
                        }
      }
    } finally {
      trace_return("termino");
    }
}

/* COMPLETADA -- NO HAY QUE PASAR NADA NO? */
  static final public void operador_multiplicativo() throws ParseException {
    trace_call("operador_multiplicativo");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMUL:{
        jj_consume_token(tMUL);
        break;
        }
      case tMOD:{
        jj_consume_token(tMOD);
        break;
        }
      case tDIV:{
        jj_consume_token(tDIV);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("operador_multiplicativo");
    }
}

  static final public void factor(Attributes at) throws ParseException {
    trace_call("factor");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCONST_INT:
      case tCONST_CHAR:
      case tCONST_STRING:
      case tTRUE:
      case tFALSE:
      case tCHAR2INT:
      case tINT2CHAR:
      case tPARENTESIS_OPEN:
      case tID:{
        primario(at);
        break;
        }
      case tNOT:{
        jj_consume_token(tNOT);
        primario(at);
if (at.type != Symbol.Types.BOOL){
                        ErrorSemantico.deteccion("Debe ser booleano <factor>");
                }
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("factor");
    }
}

  static final public void primario(Attributes at) throws ParseException {
    trace_call("primario");
    try {
Token t; // revisar
        ArrayList<Attributes> ats = new ArrayList<Attributes>();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPARENTESIS_OPEN:{
        jj_consume_token(tPARENTESIS_OPEN);
        expresion(at);
        jj_consume_token(tPARENTESIS_CLOSE);
        break;
        }
      case tINT2CHAR:{
        jj_consume_token(tINT2CHAR);
        jj_consume_token(tPARENTESIS_OPEN);
        expresion(at);
if (at.type != Symbol.Types.INT) {
                        ErrorSemantico.deteccion("Se esperaba entero <int2char>");
                }
                else {
                        at.type = Symbol.Types.CHAR;
                }
        jj_consume_token(tPARENTESIS_CLOSE);
        break;
        }
      case tCHAR2INT:{
        jj_consume_token(tCHAR2INT);
        jj_consume_token(tPARENTESIS_OPEN);
        expresion(at);
if (at.type != Symbol.Types.CHAR) {
                        ErrorSemantico.deteccion("Se esperaba caracter <char2int>");
                }
                else {
                        at.type = Symbol.Types.INT;
                }
        jj_consume_token(tPARENTESIS_CLOSE);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        if (jj_2_1(2)) {
          t = jj_consume_token(tID);
          jj_consume_token(tPARENTESIS_OPEN);
          lista_una_o_mas_exps(ats);
          jj_consume_token(tPARENTESIS_CLOSE);
//invoc. func. o comp. array
                Symbol s = null;
                try {
                        s = st.getSymbol(t.image);
                        if (s instanceof SymbolArray) {
                                at.isVecComp = true;
                        }
                        else if ((s instanceof SymbolProcedure)){

                                if(ats.size() != ((SymbolProcedure)s).parList.size()) {
                                        ErrorSemantico.deteccion("Numero incorrecto de parametros");
                                }
                                else {
                                        for (int i = 0; i < ats.size(); i++) {
                                                Attributes atP;
                                                Symbol sP;
                                                atP = ats.get(i);
                                                sP = ((SymbolProcedure)s).parList.get(i);

                                                if (atP.type != sP.type) {
                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden");
                                                        break;
                                                }
                                        }
                                }
                        }
                        else if ((s instanceof SymbolFunction)){

                                if(ats.size() != ((SymbolFunction)s).parList.size()) {
                                        ErrorSemantico.deteccion("Numero incorrecto de parametros");
                                }
                                else {
                                        for (int i = 0; i < ats.size(); i++) {
                                                Attributes atF;
                                                Symbol sF;
                                                atF = ats.get(i);
                                                sF = ((SymbolFunction)s).parList.get(i);

                                                if (atF.type != sF.type) {
                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden");
                                                        break;
                                                }
                                        }
                                }
                        }
                        else {
                                ErrorSemantico.deteccion("Se esperaba componente de vector, funci\u00f3n o procedimiento ...");
                        }
                }
                catch (SymbolNotFoundException e) {
                        ErrorSemantico.deteccion(e, t.image);
                }
                at.isVar = false;
                at.name = t.image;
                //at.type = ((SymbolFunction)s).returnType; esto daba problemas
                // Procesar la lista de parametros reales ...
                //...

        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tID:{
            t = jj_consume_token(tID);
//var. o func. sin pars 
                //¿No faltaria añadirla a la tabla semántica?
                Symbol s = null;
                try {
                        s = st.getSymbol(t.image);
                        at.isVar = true;
                        at.type = s.type;
                        at.name = t.image;
                }
                catch (SymbolNotFoundException e) {
                        ErrorSemantico.deteccion(e, t.image);
                }
            break;
            }
          case tCONST_INT:{
            jj_consume_token(tCONST_INT);
at.isVar = false;
                at.type = Symbol.Types.INT;
                at.isConst = true;
            break;
            }
          case tCONST_CHAR:{
            jj_consume_token(tCONST_CHAR);
at.isVar = false;
                at.type = Symbol.Types.CHAR;
                at.isConst = true;
            break;
            }
          case tCONST_STRING:{
            jj_consume_token(tCONST_STRING);
//rn sf.primario_8(t); 
                at.isVar = false;
                at.type = Symbol.Types.STRING;
                at.isConst = true;
            break;
            }
          case tTRUE:{
            jj_consume_token(tTRUE);
at.isVar = false;
                at.type = Symbol.Types.BOOL;
                at.isConst = true;
            break;
            }
          case tFALSE:{
            jj_consume_token(tFALSE);
at.isVar = false;
                at.type = Symbol.Types.BOOL;
                at.isConst = true;
            break;
            }
          default:
            jj_la1[38] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("primario");
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tPARENTESIS_OPEN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public alikeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e00,0x0,0x9e00,0x9e00,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x80374000,0x80374000,0x80374000,0x80374000,0x0,0x0,0x0,0x0,0xfc00000,0xfc00000,0x300000,0x300000,0x300000,0x300000,0x70000000,0x70000000,0x80070000,0x0,0x70000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0xc00,0xc00,0xc00,0x0,0x0,0x2000000,0x0,0x0,0x0,0x2000,0x0,0x0,0x10000000,0x0,0x0,0x80000000,0x0,0x8,0x10,0x80fe0344,0x80fc0344,0x80fc0344,0x80fe0344,0x3,0x3,0x3,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80c00300,0x80c00000,0x300,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x2,0x0,0x0,0x0,0x2,0x2,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public alike(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public alike(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public alike(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new alikeTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public alike(alikeTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(alikeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 39; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[66];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 39; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 66; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  static private int trace_indent = 0;
/** Enable tracing. */
  static final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
	 trace_enabled = false;
  }

  static protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  static protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  static protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  static protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
