/* alike.java */
/* Generated By:JavaCC: Do not edit this line. alike.java */
package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.attributes.*;
import java.util.ArrayList;
import lib.errores.ErrorSemantico;
import lib.tools.codeGeneration.CodeBlock;
import lib.tools.codeGeneration.PCodeInstruction.OpCode;
import lib.tools.codeGeneration.CGUtils;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Vector;

//...

public class alike implements alikeConstants {
   //...

    // Para los mensajes de depuración:
    public static final String ANSI_RESET = "\u001b[0m";
        public static final String ANSI_RED = "\u001b[31m";
    public static final String ANSI_YELLOW = "\u001b[33m";

        static SymbolTable st;

        private static void initSymbolTable() {
                boolean b;
                String[] palsRes = {
                "boolean","char","character", "integer", "null", "array",
                        "mod", "not", "and", "or",
                        "if", "elsif", "else", "then", "while", "loop", "true", "false",
                        "procedure", "function", "is", "ref", "of", "begin", "end", "return",
                        "skip_line", "put", "put_line", "get", "char2int", "int2char"
                };

                //st.insertReservedWords(palsRes);
        }

        public static String obtenerNombreArchivo(String ruta) {
        File archivo = new File(ruta);
        return archivo.getName();
    }

        private static void iterarYanadirEnTablaDeSimbolos(ArrayList<Token> ids, Attributes at){
                Symbol s = null;
                for (Token t : ids) {
                        if (at.isArray) {
                                s = new SymbolArray(t.image, at.intList.get(0), at.intList.get(1), at.type, at.parClass);
                                at.parList.add(s);
                        }
                        else {
                                if (at.type == Symbol.Types.BOOL) {
                                        s = new SymbolBool(t.image, at.parClass);
                                        at.parList.add(s);
                                }
                                else if (at.type == Symbol.Types.INT) {
                                        s = new SymbolInt(t.image, at.parClass);
                                        at.parList.add(s);
                                }
                                else if (at.type == Symbol.Types.CHAR) {
                                        s = new SymbolChar(t.image, at.parClass);
                                        at.parList.add(s);
                                }
                        }
                        try {
                                st.insertSymbol(s);
                        }
                        catch(AlreadyDefinedSymbolException e) {
                                System.err.println("Already Defined: " + e.getMessage());
                        }
                }
        }

        public static void escribirEnNuevoArchivo(String nomFich, String msg) throws IOException {
        String nomFichPCODE = obtenerNombreArchivoPCode(nomFich);
        File nuevoArchivo = new File(nomFichPCODE);
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(nuevoArchivo))) {
            writer.write(msg);
        }
    }

    public static String obtenerNombreArchivoPCode(String nomFich) {
        return nomFich.replaceAll("\\.\\w+$", ".pcode");
    }

   public static void main(String[] args) {
           alike parser = null;
           Attributes at = new Attributes();
           String nombreFichero = obtenerNombreArchivo(args[0]);

                st = new SymbolTable();
        initSymbolTable();

           try {
                   if(args.length == 0) {
                           parser = new alike(System.in);
                   }
                   else {
                           parser = new alike(new java.io.FileInputStream(args[0]));
                   }
                   //Programa es el símbolo inicial de la gramática
                   parser.Programa(at);

                   if(ErrorSemantico.ERR_SEMANTICO){
                                System.out.println(ANSI_RED + "***** Analisis terminado sin exito, errores semanticos *****" + ANSI_RESET);
                   }
                   else{
                                System.out.println("***** Compilacion finalizada. Se ha generado el fichero " + obtenerNombreArchivoPCode(nombreFichero) + " *****");
                                try {
                                        escribirEnNuevoArchivo(nombreFichero, at.code.toString());
                                } catch (IOException e) {
                                        System.out.println("Error al escribir en el archivo: " + e.getMessage());
                                }
                        }
           }
           catch (java.io.FileNotFoundException e) {
                   System.err.println ("Fichero " + args[0] + " no encontrado.");
           }
           catch (TokenMgrError e) {
                   System.err.println("LEX_ERROR: " + e.getMessage());

           }
           catch (ParseException e) {
                        System.err.println("Parse_exception: " + e.getMessage());
           }
   }

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
/*void Programa() : 
{
	//Token t;
}
{
   ( 
	   < tBEGIN >
	   | 
	   < tBOOL > | < tCHAR > | < tCHARACTER > | < tINTEGER > | < tNULL > | < tARRAY > | < tCONST_INT > | < tCONST_CHAR > | < tCONST_STRING > 
	   |
	   < tASIGN > | < tSUM > | < tRES > | < tEQU > | < tGT > | < tLT > | < tGE > | < tLE > | < tMUL > | < tMOD > | < tDIV > | < tNOT > | < tDIF > | < tAND > | < tOR >
	   |
	   < tIF > | < tELIF > |	< tTHEN > |	< tWHILE > | < tLOOP > | < tTRUE > | < tFALSE > | <tELSE>
	   |
	   < tPROCEDURE > | < tIS > | < tREF > | < tEND > | < tRETURN > | < tOF > | <tFUNCTION>
	   |
	   < tSKIP_LN > | < tPUT > | < tPUT_LN > | < tGET > | <tCHAR2INT> | <tINT2CHAR> 
	   |
	   < tPUNTO > |	< tCOMA > |	< tDOSPUNTOS > | < tDOBLEPUNTO > | < tPUNTOCOMA > |	< tCORCHETES_OPEN > | < tCORCHETES_CLOSE > | < tPARENTESIS_OPEN > |	< tPARENTESIS_CLOSE > | < tID >
   )+
   < EOF >
}*/
  static final public 

void Programa(Attributes at) throws ParseException {Token t;
        Attributes at1 = new Attributes();
        Attributes at2 = new Attributes();
        String etiqINI_PROGRAM = CGUtils.newLabel();
        Boolean aparece_pre = false;
    jj_consume_token(tPROCEDURE);
    t = jj_consume_token(tID);
Symbol s;
                at1.parList = new ArrayList<Symbol>();
                s = new SymbolProcedure(t.image,at1.parList,true);
                try {
                        st.insertSymbol(s);
                }
                catch (AlreadyDefinedSymbolException e) {
                        ErrorSemantico.deteccion(e, t.image);
                }
                // ------------------------------------------------
                at.code.addInst(OpCode.ENP, etiqINI_PROGRAM);
    jj_consume_token(tIS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPRE:{
      precondicion(at2);
at.code.addLabel(etiqINI_PROGRAM);
                System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiqINI_PROGRAM + ANSI_RESET);
                at.code.addBlock(at2.code);
                aparece_pre = true; // Pequeño arreglo para evitar doble definición de comienzo de programa

      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tID:{
      declaracion_variables();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPROCEDURE:
    case tFUNCTION:{
      declaracion_procs_funcs(at);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(tBEGIN);
if(!aparece_pre){
                        // Si no ha aparece pre, hay que añadir la etiqueta de inicio de programa aquí
                        at.code.addLabel(etiqINI_PROGRAM);
                        System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiqINI_PROGRAM + ANSI_RESET);
                }
    instrucciones(at1);
at.code.addBlock(at1.code);
    jj_consume_token(tEND);
    jj_consume_token(tPUNTOCOMA);
System.err.println(st.toString());
                st.removeBlock();
    jj_consume_token(0);
at.code.addInst(OpCode.LVP);
}

  static final public void declaracion_procs_funcs(Attributes at) throws ParseException {
    label_1:
    while (true) {
      declaracion_proc_func(at);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:
      case tFUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
}

  static final public void declaracion_proc_func(Attributes at) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPROCEDURE:{
      declaracion_proc(at);
      break;
      }
    case tFUNCTION:{
      declaracion_func(at);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void declaracion_func(Attributes at) throws ParseException {Attributes at1 = new Attributes(), at2 = new Attributes(), at3 = new Attributes(), at4 = new Attributes();
    cabecera_funcion(at1);
at2.name = at1.name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPRE:{
      precondicion(at2);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tID:{
      declaracion_variables();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:
      case tFUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      declaracion_proc_func(at3);
    }
    jj_consume_token(tBEGIN);
    instrucciones_return(at4);
    jj_consume_token(tEND);
    jj_consume_token(tPUNTOCOMA);
System.err.println(st.toString());
                st.removeBlock();
                at.code.addBlock(at1.code);
                at.code.addBlock(at2.code);
                at.code.addBlock(at3.code);
                at.code.addBlock(at4.code);
                at.code.addInst(OpCode.CSF);
}

  static final public void declaracion_proc(Attributes at) throws ParseException {Attributes at1 = new Attributes(), at2 = new Attributes(), at3 = new Attributes(), at4 = new Attributes();
    cabecera_procedimiento(at1);
at2.name = at1.name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPRE:{
      precondicion(at2);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tID:{
      declaracion_variables();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:
      case tFUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      declaracion_proc_func(at3);
    }
    jj_consume_token(tBEGIN);
    instrucciones(at4);
    jj_consume_token(tEND);
    jj_consume_token(tPUNTOCOMA);
System.err.println(st.toString());
                st.removeBlock();
                at.code.addBlock(at1.code);
                at.code.addBlock(at2.code);
                at.code.addBlock(at3.code);
                at.code.addBlock(at4.code);
                at.code.addInst(OpCode.CSF);
}

  static final public void precondicion(Attributes at) throws ParseException {Attributes at1 = new Attributes();
    jj_consume_token(tPRE);
    expresion(at1);
if (at1.type != Symbol.Types.BOOL) {
                        ErrorSemantico.deteccion("Se esperaba booleano <precondicion>");
                }
                else {
                        String etiq_OK = CGUtils.newLabel();
                        at.code.addBlock(at1.code);
                        at.code.addInst(OpCode.JMT, etiq_OK);

                        String linea_error = ("Error en la funcion/procedimiento " + at.name + ": no se cumple la precondicion");

                        for (int i = 0; i < linea_error.length(); i++) {
                                at.code.addInst(OpCode.STC, (int) linea_error.charAt(i));
                                at.code.addInst(OpCode.WRT, 0);
                        }

                        at.code.addInst(OpCode.LVP);
                        at.code.addLabel(etiq_OK);
                        System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiq_OK + ANSI_RESET);
                }
    jj_consume_token(tPUNTOCOMA);
}

  static final public ArrayList<Token> lista_ids() throws ParseException {ArrayList<Token> ids = new ArrayList<Token>();
        Token t;
    t = jj_consume_token(tID);
ids.add(t);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMA:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      jj_consume_token(tCOMA);
      t = jj_consume_token(tID);
ids.add(t);
    }
{if ("" != null) return ids;}
    throw new Error("Missing return statement in function");
}

  static final public void declaracion_variables() throws ParseException {
    label_5:
    while (true) {
      declaracion_var();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
    }
}

  static final public void declaracion_variables_puntocoma() throws ParseException {Attributes at = new Attributes();
    label_6:
    while (true) {
      declaracion_var_puntocoma(at);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
    }
}

  static final public void tipo_variable(Attributes at) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tBOOL:{
      jj_consume_token(tBOOL);
at.type = Symbol.Types.BOOL;
      break;
      }
    case tCHAR:{
      jj_consume_token(tCHAR);
at.type = Symbol.Types.CHAR;
      break;
      }
    case tCHARACTER:{
      jj_consume_token(tCHARACTER);
at.type = Symbol.Types.CHAR;
      break;
      }
    case tINTEGER:{
      jj_consume_token(tINTEGER);
at.type = Symbol.Types.INT;
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void rango(Attributes at) throws ParseException {Token t1, t2;
        Boolean res1 = false;
        Boolean res2 = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tRES:{
      jj_consume_token(tRES);
res1 = true;
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    t1 = jj_consume_token(tCONST_INT);
    jj_consume_token(tDOSPUNTOS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tRES:{
      jj_consume_token(tRES);
res2 = true;
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    t2 = jj_consume_token(tCONST_INT);
Integer inicio,fin;
                inicio = Integer.valueOf(t1.image);
                fin = Integer.valueOf(t2.image);
                if(res1){
                        inicio = inicio * -1;
                }
                if(res2){
                        fin = fin * -1;
                }
                if(inicio > fin) {
                        //System.out.println(ANSI_YELLOW + inicio + ", " + fin + ANSI_RESET);
                        ErrorSemantico.deteccion("Rango invalido");
                }
                else {
                        at.intList.add(inicio);
                        at.intList.add(fin);
                }
}

  static final public void estructura_array(Attributes at) throws ParseException {
    jj_consume_token(tARRAY);
    jj_consume_token(tPARENTESIS_OPEN);
    rango(at);
    jj_consume_token(tPARENTESIS_CLOSE);
    jj_consume_token(tOF);
    tipo_variable(at);
at.isArray = true;
                // Faltarían más cosas de atribuir a at?

}

  static final public void declaracion_var_puntocoma(Attributes at) throws ParseException {ArrayList<Token> ids;
        Attributes at1 = new Attributes(), at2 = new Attributes();
        Symbol s;
    ids = lista_ids();
    jj_consume_token(tDOBLEPUNTO);
at1.parClass = Symbol.ParameterClass.VAL;
                at2.parClass = Symbol.ParameterClass.VAL;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tREF:{
      jj_consume_token(tREF);
at1.parClass = Symbol.ParameterClass.REF;
                at2.parClass = Symbol.ParameterClass.REF;
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tBOOL:
    case tCHAR:
    case tCHARACTER:
    case tINTEGER:{
      tipo_variable(at1);
iterarYanadirEnTablaDeSimbolos(ids,at1);
                  at.parList = at1.parList;
      break;
      }
    case tARRAY:{
      estructura_array(at2);
iterarYanadirEnTablaDeSimbolos(ids,at2);
                  at.parList = at2.parList;
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void declaracion_var() throws ParseException {ArrayList<Token> ids;
        Attributes at1 = new Attributes(), at2 = new Attributes();
    ids = lista_ids();
    jj_consume_token(tDOBLEPUNTO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tBOOL:
    case tCHAR:
    case tCHARACTER:
    case tINTEGER:{
      tipo_variable(at1);
iterarYanadirEnTablaDeSimbolos(ids,at1);
      break;
      }
    case tARRAY:{
      estructura_array(at2);
iterarYanadirEnTablaDeSimbolos(ids,at2);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(tPUNTOCOMA);
}

  static final public void lista_parametros_funcion_o_proc(Attributes at) throws ParseException {Attributes at1 = new Attributes(), at2 = new Attributes();
    declaracion_var_puntocoma(at1);
for (Symbol s : at1.parList) {
                        at.parList.add(s);
                }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPUNTOCOMA:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      jj_consume_token(tPUNTOCOMA);
      declaracion_var_puntocoma(at2);
for (Symbol s : at2.parList) {
                                at.parList.add(s);
                        }
    }
}

  static final public void cabecera_procedimiento(Attributes at) throws ParseException {Token t;
        Attributes at1 = new Attributes(), at2 = new Attributes();
    jj_consume_token(tPROCEDURE);
    t = jj_consume_token(tID);
at.name = t.image;
                Symbol s;
                at.parList = new ArrayList<Symbol>();

                String etiq = CGUtils.newLabel();
                at.code.addLabel(etiq);
                System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiq + ANSI_RESET);
                at.code.addBlock(at1.code);

                s = new SymbolProcedure(t.image,at.parList,etiq);
                try {
                        st.insertSymbol(s);
                        st.insertBlock();
                }
                catch (AlreadyDefinedSymbolException e) {
                        ErrorSemantico.deteccion(e,t.image);
                }

                at2.parList = at.parList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPARENTESIS_OPEN:{
      jj_consume_token(tPARENTESIS_OPEN);
      lista_parametros_funcion_o_proc(at2);
try {
                        Symbol aux = st.getSymbol(t.image);
                        if (aux instanceof SymbolProcedure) {
                                //System.err.println("Procedimiento");
                                SymbolProcedure procedure = (SymbolProcedure) aux;
                                procedure.parList = at2.parList;
                                //System.out.println(ANSI_YELLOW + "CABECERA_PROCEDIMIENTO: " + procedure.parList.size() + ANSI_RESET);
                        }
                }
                catch (SymbolNotFoundException e) {
                        ErrorSemantico.deteccion(e,t.image);
                }
      jj_consume_token(tPARENTESIS_CLOSE);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(tIS);
}

  static final public void cabecera_funcion(Attributes at) throws ParseException {Token t;
        Attributes at1 = new Attributes(), at2 = new Attributes();
    jj_consume_token(tFUNCTION);
    t = jj_consume_token(tID);
at.name = t.image;
                Symbol s;
                at.parList = new ArrayList<Symbol>();

                String etiq = CGUtils.newLabel();
                at.code.addLabel(etiq);
                System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiq + ANSI_RESET);
                at.code.addBlock(at1.code);

                s = new SymbolFunction(t.image, at.parList, at1.type, etiq);
                try {
                        st.insertSymbol(s);
                        st.insertBlock();
                }
                catch (AlreadyDefinedSymbolException e) {
                        ErrorSemantico.deteccion(e,t.image);
                }
                at2.parList = at.parList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPARENTESIS_OPEN:{
      jj_consume_token(tPARENTESIS_OPEN);
      lista_parametros_funcion_o_proc(at2);
      jj_consume_token(tPARENTESIS_CLOSE);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(tRETURN);
    tipo_variable(at1);
    jj_consume_token(tIS);
try {
                        Symbol aux = st.getSymbol(t.image);
                        if (aux instanceof SymbolFunction) {
                                //System.err.println("Funcion");
                                SymbolFunction funcion = (SymbolFunction) aux;
                                funcion.returnType = at1.type;
                                funcion.parList = at2.parList;
                        }
                }
                catch (SymbolNotFoundException e) {
                        ErrorSemantico.deteccion(e, t.image);
                }
}

  static final public void inst_leer(Attributes at) throws ParseException {ArrayList<Token> ids;
    jj_consume_token(tGET);
    jj_consume_token(tPARENTESIS_OPEN);
    ids = lista_ids();
// NO, es una lista de asignables, o son IDs o son un ID(expresion)
                for(Token t : ids) {
                        try {
                                Symbol s = st.getSymbol(t.image);
                                if (!((s.type == Symbol.Types.CHAR) || (s.type == Symbol.Types.INT))) {
                                        ErrorSemantico.deteccion("Se esperaba caracter o entero <inst_leer>");
                                }
                                if (s.type == Symbol.Types.INT) {
                                        at.code.addInst(OpCode.SRF, (st.level - s.nivel), (int) s.dir);
                                        at.code.addInst(OpCode.RD, 1);
                                }
                                else if (s.type == Symbol.Types.CHAR) {
                                        at.code.addInst(OpCode.SRF, (st.level - s.nivel), (int) s.dir);
                                        at.code.addInst(OpCode.RD, 0);
                                }
                        }
                        catch(SymbolNotFoundException e){
                                ErrorSemantico.deteccion(e, t.image);
                        }
                }
    jj_consume_token(tPARENTESIS_CLOSE);
}

  static final public ArrayList<Token> lista_asignables() throws ParseException {ArrayList<Token> ids = new ArrayList<Token>();
        Token t;
    t = jj_consume_token(tID);
ids.add(t);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMA:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      jj_consume_token(tCOMA);
      t = jj_consume_token(tID);
ids.add(t);
    }
{if ("" != null) return ids;}
    throw new Error("Missing return statement in function");
}

  static final public void inst_saltar_linea(Attributes at) throws ParseException {
    jj_consume_token(tSKIP_LN);
at.code.addInst(OpCode.RD, 0);
                at.code.addInst(OpCode.POP);
}

  static final public void inst_escribir(Attributes at) throws ParseException {ArrayList<Attributes> ats = new ArrayList<Attributes>();
    jj_consume_token(tPUT);
    jj_consume_token(tPARENTESIS_OPEN);
    lista_una_o_mas_exps(ats);
for (Attributes att : ats) {

                        if (!((att.type == Symbol.Types.INT) || (att.type == Symbol.Types.BOOL)
                        || (att.type == Symbol.Types.CHAR) || (att.type == Symbol.Types.STRING))) {
                                System.err.println(att.type);
                                ErrorSemantico.deteccion("Se esperaba entero, booleano, caracter o string <inst_escribir_linea>");
                        }
                        if (att.type == Symbol.Types.INT) {
                                // Si es una constante
                                if(att.name == "CONST_INT"){
                                        String etiq_START = CGUtils.newLabel();
                                        at.code.addInst(OpCode.STC, Integer.parseInt(att.const_value));
                                        at.code.addInst(OpCode.WRT, 1);
                                }
                                else { // Es una variable
                                        Symbol s = null;
                                        try {
                                                s = st.getSymbol(att.name);
                                        }
                                        catch(SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, att.name);
                                        }

                                        at.code.addInst(OpCode.SRF, (st.level - s.nivel), (int)s.dir);
                                        at.code.addInst(OpCode.DRF);
                                        at.code.addInst(OpCode.WRT, 1);
                                }
                        }
                        else if (att.type == Symbol.Types.CHAR) {

                                // Caso de que sea constante
                                if(att.name == "CONST_CHAR"){
                                        // Eliminar primer y ultimo caracter de att.const_value, que son las comillas.
                                        String msg = att.const_value.substring(1, att.const_value.length() - 1);

                                        // Al ser 1 sólo caracter, no hace falta recorrerlo
                                        at.code.addInst(OpCode.STC, (int) msg.charAt(0));
                                        at.code.addInst(OpCode.WRT, 0);
                                }
                                else if(att.name == "CONST_INT"){
                                        // Se trata del caso de una llamada a la función int2char
                                        // En att.const_value tendremos el caracter correspondiente al valor entero que queremos convertir a char
                                        at.code.addInst(OpCode.STC, Integer.parseInt(att.const_value));
                                        at.code.addInst(OpCode.WRT, 0);

                                }
                                else { // Es una variable

                                        Symbol s = null;
                                        try {
                                                s = st.getSymbol(att.name);
                                        }
                                        catch(SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, att.name);
                                        }

                                        at.code.addInst(OpCode.SRF, (st.level - s.nivel), (int)s.dir);
                                        at.code.addInst(OpCode.DRF);
                                        at.code.addInst(OpCode.WRT, 0);
                                }

                        }
                        else if (att.type == Symbol.Types.STRING) {

                                // No tenemos variables string, solo constantes

                                // Eliminar primer y ultimo caracter de att.const_value, que son las comillas.
                                String msg = att.const_value.substring(1, att.const_value.length() - 1);
                                // Recorrer cada caracter de esa nueva variable
                                for (int i = 0; i < msg.length(); i++) {
                                        // Por cada caracter, hacemos un STC con el valor ascii de ese caracter y un WRT con 0
                                        at.code.addInst(OpCode.STC, (int) msg.charAt(i));
                                        at.code.addInst(OpCode.WRT, 0);
                                }
                        }

                        else if (att.type == Symbol.Types.BOOL) {

                                if (att.name == "TRUE") {
                                        // Escribimos la palabra "true":
                                        String true_string = "true";
                                        for (int i = 0; i < true_string.length(); i++) {
                                                at.code.addInst(OpCode.STC, (int) true_string.charAt(i));
                                                at.code.addInst(OpCode.WRT, 0);
                                        }
                                }
                                else if (att.name == "FALSE") {
                                        // Escribimos la palabra "false":
                                        String false_string = "false";
                                        for (int i = 0; i < false_string.length(); i++) {
                                                at.code.addInst(OpCode.STC, (int) false_string.charAt(i));
                                                at.code.addInst(OpCode.WRT, 0);
                                        }
                                }
                                else { // Variable booleana, sólo se puede saber en tiempo de ejecución

                                        Symbol s = null;
                                        try {
                                                s = st.getSymbol(att.name);
                                        }
                                        catch(SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, att.name);
                                        }

                                        String etiq_FALSE = CGUtils.newLabel();
                                        String etiq_END = CGUtils.newLabel();

                                        at.code.addInst(OpCode.SRF, (st.level - s.nivel), (int)s.dir);
                                        at.code.addInst(OpCode.DRF);
                                        at.code.addInst(OpCode.JMF, etiq_FALSE);
                                        // Si es true
                                        String true_string = "true";
                                        for (int i = 0; i < true_string.length(); i++) {
                                                at.code.addInst(OpCode.STC, (int) true_string.charAt(i));
                                                at.code.addInst(OpCode.WRT, 0);
                                        }
                                        at.code.addInst(OpCode.JMP, etiq_END);
                                        at.code.addLabel(etiq_FALSE);
                                        System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiq_FALSE + ANSI_RESET);
                                        // Si es false
                                        String false_string = "false";
                                        for (int i = 0; i < false_string.length(); i++) {
                                                at.code.addInst(OpCode.STC, (int) false_string.charAt(i));
                                                at.code.addInst(OpCode.WRT, 0);
                                        }
                                        at.code.addLabel(etiq_END);
                                        System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiq_END + ANSI_RESET);
                                }
                        }
                }
    jj_consume_token(tPARENTESIS_CLOSE);
}

  static final public void inst_escribir_linea(Attributes at) throws ParseException {ArrayList<Attributes> ats = new ArrayList<Attributes>();
        Attributes at1 = new Attributes();
    jj_consume_token(tPUT_LN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPARENTESIS_OPEN:{
      jj_consume_token(tPARENTESIS_OPEN);
      lista_una_o_mas_exps(ats);
for (Attributes att : ats) {

                        System.out.println(ANSI_YELLOW + "NOMBRE: " + att.name + " TIPO DE EXPRESION: " + att.type + ANSI_RESET);

                        if (!((att.type == Symbol.Types.INT) || (att.type == Symbol.Types.BOOL)
                        || (att.type == Symbol.Types.CHAR) || (att.type == Symbol.Types.STRING))) {
                                System.err.println(att.type);
                                ErrorSemantico.deteccion("Se esperaba entero, booleano, caracter o string <inst_escribir_linea>");
                        }
                        if (att.type == Symbol.Types.INT) {
                                // Si es una constante
                                if(att.name == "CONST_INT"){
                                        String etiq_START = CGUtils.newLabel();
                                        at.code.addInst(OpCode.STC, Integer.parseInt(att.const_value));
                                        at.code.addInst(OpCode.WRT, 1);
                                }
                                else { // Es una variable
                                        Symbol s = null;
                                        try {
                                                s = st.getSymbol(att.name);
                                        }
                                        catch(SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, att.name);
                                        }

                                        at.code.addInst(OpCode.SRF, (st.level - s.nivel), (int)s.dir);
                                        at.code.addInst(OpCode.DRF);
                                        at.code.addInst(OpCode.WRT, 1);
                                }
                        }
                        else if (att.type == Symbol.Types.CHAR) {
                                // Caso de que sea constante
                                if(att.name == "CONST_CHAR"){
                                        // Eliminar primer y ultimo caracter de att.const_value, que son las comillas.
                                        String msg = att.const_value.substring(1, att.const_value.length() - 1);

                                        // Al ser 1 sólo caracter, no hace falta recorrerlo
                                        at.code.addInst(OpCode.STC, (int) msg.charAt(0));
                                        at.code.addInst(OpCode.WRT, 0);
                                }
                                else if(att.name == "CONST_INT"){
                                        // Se trata del caso de una llamada a la función int2char
                                        // En att.const_value tendremos el caracter correspondiente al valor entero que queremos convertir a char
                                        at.code.addInst(OpCode.STC, Integer.parseInt(att.const_value));
                                        at.code.addInst(OpCode.WRT, 0);

                                }
                                else { // Es una variable

                                        Symbol s = null;
                                        try {
                                                s = st.getSymbol(att.name);
                                        }
                                        catch(SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, att.name);
                                        }

                                        at.code.addInst(OpCode.SRF, (st.level - s.nivel), (int)s.dir);
                                        at.code.addInst(OpCode.DRF);
                                        at.code.addInst(OpCode.WRT, 0);
                                }

                        }
                        else if (att.type == Symbol.Types.STRING) {
                                // No tenemos variables string, solo constantes

                                // Eliminar primer y ultimo caracter de att.const_value, que son las comillas.
                                String msg = att.const_value.substring(1, att.const_value.length() - 1);
                                // Recorrer cada caracter de esa nueva variable
                                for (int i = 0; i < msg.length(); i++) {
                                        // Por cada caracter, hacemos un STC con el valor ascii de ese caracter y un WRT con 0
                                        at.code.addInst(OpCode.STC, (int) msg.charAt(i));
                                        at.code.addInst(OpCode.WRT, 0);
                                }
                        }

                        else if (att.type == Symbol.Types.BOOL) {
                                if (att.name == "TRUE") {
                                        // Escribimos la palabra "true":
                                        String true_string = "true";
                                        for (int i = 0; i < true_string.length(); i++) {
                                                at.code.addInst(OpCode.STC, (int) true_string.charAt(i));
                                                at.code.addInst(OpCode.WRT, 0);
                                        }
                                }
                                else if (att.name == "FALSE") {
                                        // Escribimos la palabra "false":
                                        String false_string = "false";
                                        for (int i = 0; i < false_string.length(); i++) {
                                                at.code.addInst(OpCode.STC, (int) false_string.charAt(i));
                                                at.code.addInst(OpCode.WRT, 0);
                                        }
                                }
                                else { // Variable booleana, sólo se puede saber en tiempo de ejecución

                                        Symbol s = null;
                                        try {
                                                s = st.getSymbol(att.name);
                                        }
                                        catch(SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, att.name);
                                        }

                                        String etiq_FALSE = CGUtils.newLabel();
                                        String etiq_END = CGUtils.newLabel();

                                        at.code.addInst(OpCode.SRF, (st.level - s.nivel), (int)s.dir);
                                        at.code.addInst(OpCode.DRF);
                                        at.code.addInst(OpCode.JMF, etiq_FALSE);
                                        // Si es true
                                        String true_string = "true";
                                        for (int i = 0; i < true_string.length(); i++) {
                                                at.code.addInst(OpCode.STC, (int) true_string.charAt(i));
                                                at.code.addInst(OpCode.WRT, 0);
                                        }
                                        at.code.addInst(OpCode.JMP, etiq_END);
                                        at.code.addLabel(etiq_FALSE);
                                        System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiq_FALSE + ANSI_RESET);
                                        // Si es false
                                        String false_string = "false";
                                        for (int i = 0; i < false_string.length(); i++) {
                                                at.code.addInst(OpCode.STC, (int) false_string.charAt(i));
                                                at.code.addInst(OpCode.WRT, 0);
                                        }
                                        at.code.addLabel(etiq_END);
                                        System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiq_END + ANSI_RESET);
                                }
                        }
                }
      jj_consume_token(tPARENTESIS_CLOSE);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
// El salto de línea tiene un valor en ascii de 10
                at.code.addInst(OpCode.STC, 10);
                at.code.addInst(OpCode.WRT, 0);
}

  static final public void inst_invocacion_o_asignacion(Attributes at) throws ParseException {Attributes at1 = new Attributes(), at2 = new Attributes();
    expresion(at1);
at.code = at1.code;
                try {
                        Symbol s = st.getSymbol(at1.name);
                        if ((s instanceof SymbolProcedure) && (((SymbolProcedure) s).principal)) {
                                ErrorSemantico.deteccion("El procedimiento principal no es invocable");
                        }
                        if (s instanceof SymbolProcedure) {
                                at.code.addOSFInst(st.level,(st.level - ((SymbolProcedure)s).nivel), ((SymbolProcedure)s).label);
                        }
                        else if (s instanceof SymbolFunction){
                                at.code.addOSFInst(st.level,(st.level - ((SymbolFunction)s).nivel), ((SymbolFunction)s).label);
                        }
                }
                catch(SymbolNotFoundException e){
                        ErrorSemantico.deteccion(e, at1.name);
                }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tASIGN:{
      jj_consume_token(tASIGN);
      expresion(at2);
Symbol s = null, s2 = null;
                //System.out.println("----------->" + at1.name);
                //System.out.println("----------->" + at2.name);
                try {
                        s = st.getSymbol(at1.name);

                        // Evitamos también que entre si los nombres son los de las ctes, porque al intentar obtener el símbolo dara error
                        if (at2.name != "" && at2.name != "TRUE" && at2.name != "FALSE" && at2.name != "CONST_INT"  && at2.name != "CONST_CHAR" & at2.name != "CONST_STRING") {
                                s2 = st.getSymbol(at2.name);
                                if (s2 instanceof SymbolProcedure) {
                                        ErrorSemantico.deteccion("No se puede asignar un procedimiento, no devuelve nada");
                                }
                                else if (s2 instanceof SymbolFunction){
                                        // Si variable es escalar y tipos at1 y at2 iguales -> OK
                                        // Doy por asumido que escalares agrupa tmb char, string y bool
                                        if(!((at1.type == Symbol.Types.INT || at1.type == Symbol.Types.CHAR ||
                                        at1.type == Symbol.Types.BOOL) && at1.type == ((SymbolFunction)s2).returnType)){
                                                ErrorSemantico.deteccion("1.Asignacion con tipos distintos: " + at1.type + ":= " + ((SymbolFunction)s2).returnType);
                                        }
                                        // Si es una componente de vector y tipos at1 y at2 iguales -> OK
                                        if(at1.isVecComp && (((SymbolArray) s).baseType != ((SymbolFunction)s2).returnType)){
                                                ErrorSemantico.deteccion("La componente del vector no es del tipo del vector");
                                        }
                                }
                        }

                        // Funciones y procedimientos no pueden ser asignables.
                        if (s instanceof SymbolFunction || s instanceof SymbolProcedure) {
                                ErrorSemantico.deteccion("Funcion o procedimiento no son asignables");
                        }
                        // Para el caso de que no se asigne una función, sino cualquier otro valor escalar.
                        else if (!(s2 instanceof SymbolFunction || s2 instanceof SymbolProcedure)){
                                // Si es una componente de vector y tipos at1 y at2 iguales -> OK
                                if(s instanceof SymbolArray){
                                        if(at1.isVecComp && (((SymbolArray) s).baseType != at2.type)){
                                                //System.out.println(at1.name);
                                                ErrorSemantico.deteccion("La componente del vector no es del tipo del vector");
                                        }
                                }
                                else{
                                        // Si variable es escalar y tipos at1 y at2 iguales -> OK
                                        // Doy por asumido que escalares agrupa tmb char, string y bool
                                        if(!((at1.type == Symbol.Types.INT || at1.type == Symbol.Types.CHAR ||
                                        at1.type == Symbol.Types.BOOL) && at1.type == at2.type)){
                                                ErrorSemantico.deteccion("2.Asignacion con tipos distintos: " + at1.type + ":= " + at2.type);
                                        }
                                }
                        }
                }
                catch (SymbolNotFoundException e){
                        ErrorSemantico.deteccion(e, ("at1.name: " + at1.name + ", at2.name: " + at2.name));
                }
                // ---------------------- GENERACION DE CODIGO ------------------------------
                //at.code.addBlock(at1.code);
                at.code.addBlock(at2.code);
                at.code.addInst(OpCode.ASG);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
}

  static final public void inst_if(Attributes at) throws ParseException {Attributes at1 = new Attributes(), at2 = new Attributes(), at3 = new Attributes(), at4 = new Attributes(), at5 = new Attributes();
    jj_consume_token(tIF);
    expresion(at1);
at.code = at1.code;
                String etiqSINO = CGUtils.newLabel();
                at.code.addInst(OpCode.JMF, etiqSINO);
                if (at1.type != Symbol.Types.BOOL) {
                        ErrorSemantico.deteccion("Se esperaba booleano <if> 1");
                }
    jj_consume_token(tTHEN);
    instrucciones_return(at3);
String etiqFIN = CGUtils.newLabel();
                at.code.addBlock(at3.code);
                at.code.addInst(OpCode.JMP, etiqFIN);
                at.code.addLabel(etiqSINO);
                System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiqSINO + ANSI_RESET);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tELIF:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_9;
      }
      jj_consume_token(tELIF);
      expresion(at2);
at.code.addBlock(at2.code);
                String etiqSINO2 = CGUtils.newLabel();
                at.code.addInst(OpCode.JMF, etiqSINO2);


                if (at2.type != Symbol.Types.BOOL) {
                        ErrorSemantico.deteccion("Se esperaba booleano <if> 2");
                }
      jj_consume_token(tTHEN);
      instrucciones_return(at4);
at.code.addBlock(at4.code);
                at.code.addInst(OpCode.JMP, etiqFIN);
                at4.code = new CodeBlock();
                at.code.addLabel(etiqSINO2);
                System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiqSINO2 + ANSI_RESET);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tELSE:{
      jj_consume_token(tELSE);
      instrucciones_return(at5);
at.code.addBlock(at5.code);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(tEND);
    jj_consume_token(tIF);
at.code.addLabel(etiqFIN);
                System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiqFIN + ANSI_RESET);
}

  static final public void inst_while(Attributes at) throws ParseException {Attributes at1 = new Attributes(), at2 = new Attributes();
        Symbol.Types at1type = Symbol.Types.UNDEFINED;
    jj_consume_token(tWHILE);
String etiqExp = CGUtils.newLabel();
                at.code.addLabel(etiqExp);
                System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiqExp + ANSI_RESET);
    expresion(at1);
if (at1type == Symbol.Types.BOOL) {
                        ErrorSemantico.deteccion("Se esperaba booleano <while>");
                }
                at.code.addBlock(at1.code);
                String etiqFin = CGUtils.newLabel();
                at.code.addInst(OpCode.JMF, etiqFin);
    jj_consume_token(tLOOP);
    instrucciones_return(at2);
at.code.addBlock(at2.code);
    jj_consume_token(tEND);
    jj_consume_token(tLOOP);
at.code.addInst(OpCode.JMP, etiqExp);
                at.code.addLabel(etiqFin);
                System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiqFin + ANSI_RESET);
}

  static final public void inst_return(Attributes at) throws ParseException {
    jj_consume_token(tRETURN);
    expresion(at);
if (!((at.type == Symbol.Types.INT) || (at.type == Symbol.Types.BOOL) || (at.type == Symbol.Types.CHAR))){
                        String _error = "Tipo incompatible a devolver en return, (" + at.type.toString() + ") <inst_return>";
                        ErrorSemantico.deteccion(_error);
                }
                if (at.name == "CONST_INT" || at.name == "CONST_CHAR" || at.name == "TRUE" || at.name == "FALSE") { // si es constante
                        at.code.addInst(OpCode.STC, 0); //No podemos meter una constante cualquiera
                        at.code.addInst(OpCode.CSF);
                }
                else {
                        try {
                                Symbol s = st.getSymbol(at.name);

                                if (s instanceof SymbolFunction) {
                                        at.code.addInst(OpCode.CSF);
                                }
                                else {
                                        at.code.addInst(OpCode.SRF, (st.level - s.nivel), (int)s.dir);
                                        at.code.addInst(OpCode.DRF);
                                        at.code.addInst(OpCode.CSF);
                                }
                        } catch (SymbolNotFoundException e) {
                                ErrorSemantico.deteccion(e, at.name);
                        }
                }
}

  static final public void inst_null(Attributes at) throws ParseException {
    jj_consume_token(tNULL);
at.code.addInst(OpCode.NOP);
}

  static final public void inst_asercion(Attributes at) throws ParseException {Attributes at1 = new Attributes();
        Token t;
        String etiq_OK = CGUtils.newLabel();
    jj_consume_token(tASSERT);
    expresion(at1);
{
                        if(at1.type != Symbol.Types.BOOL){
                                ErrorSemantico.deteccion("Se esperaba booleano <inst_asercion>");
                        }

                        // ---------------------- GENERACION DE CODIGO ------------------------------

                        at.code = at1.code;
                        at.code.addInst(OpCode.JMT, etiq_OK);
                }
    jj_consume_token(tDOBLEPUNTO);
    t = jj_consume_token(tCONST_STRING);
String linea_error = ("Error en la linea " + t.beginLine + ": " + t.image);

                for (int i = 0; i < linea_error.length(); i++) {
                        at.code.addInst(OpCode.STC, (int) linea_error.charAt(i));
                        at.code.addInst(OpCode.WRT, 0);
                }

                at.code.addInst(OpCode.LVP);
                at.code.addLabel(etiq_OK);
                System.out.println(ANSI_YELLOW + "ETIQUETA A\u00d1ADIDA: " + etiq_OK + ANSI_RESET);
}

  static final public void instruccion_return(Attributes at) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tGET:{
      inst_leer(at);
      break;
      }
    case tSKIP_LN:{
      inst_saltar_linea(at);
      break;
      }
    case tPUT:{
      inst_escribir(at);
      break;
      }
    case tPUT_LN:{
      inst_escribir_linea(at);
      break;
      }
    case tCONST_INT:
    case tCONST_CHAR:
    case tCONST_STRING:
    case tSUM:
    case tRES:
    case tNOT:
    case tTRUE:
    case tFALSE:
    case tCHAR2INT:
    case tINT2CHAR:
    case tPARENTESIS_OPEN:
    case tID:{
      inst_invocacion_o_asignacion(at);
      break;
      }
    case tIF:{
      inst_if(at);
      break;
      }
    case tWHILE:{
      inst_while(at);
      break;
      }
    case tRETURN:{
      inst_return(at);
      break;
      }
    case tNULL:{
      inst_null(at);
      break;
      }
    case tASSERT:{
      inst_asercion(at);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void instruccion(Attributes at) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tGET:{
      inst_leer(at);
      break;
      }
    case tSKIP_LN:{
      inst_saltar_linea(at);
      break;
      }
    case tPUT:{
      inst_escribir(at);
      break;
      }
    case tPUT_LN:{
      inst_escribir_linea(at);
      break;
      }
    case tCONST_INT:
    case tCONST_CHAR:
    case tCONST_STRING:
    case tSUM:
    case tRES:
    case tNOT:
    case tTRUE:
    case tFALSE:
    case tCHAR2INT:
    case tINT2CHAR:
    case tPARENTESIS_OPEN:
    case tID:{
      inst_invocacion_o_asignacion(at);
      break;
      }
    case tIF:{
      inst_if(at);
      break;
      }
    case tWHILE:{
      inst_while(at);
      break;
      }
    case tNULL:{
      inst_null(at);
      break;
      }
    case tASSERT:{
      inst_asercion(at);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void instrucciones(Attributes at) throws ParseException {Attributes at1 = new Attributes();
    label_10:
    while (true) {
      instruccion(at1);
at.code.addBlock(at1.code);
                at1.code = new CodeBlock();
      jj_consume_token(tPUNTOCOMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNULL:
      case tCONST_INT:
      case tCONST_CHAR:
      case tCONST_STRING:
      case tSUM:
      case tRES:
      case tNOT:
      case tIF:
      case tWHILE:
      case tTRUE:
      case tFALSE:
      case tASSERT:
      case tSKIP_LN:
      case tPUT:
      case tPUT_LN:
      case tGET:
      case tCHAR2INT:
      case tINT2CHAR:
      case tPARENTESIS_OPEN:
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_10;
      }
    }
}

  static final public void instrucciones_return(Attributes at) throws ParseException {Attributes at1 = new Attributes();
    label_11:
    while (true) {
      instruccion_return(at1);
at.code.addBlock(at1.code);
                at1.code = new CodeBlock();
      jj_consume_token(tPUNTOCOMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNULL:
      case tCONST_INT:
      case tCONST_CHAR:
      case tCONST_STRING:
      case tSUM:
      case tRES:
      case tNOT:
      case tIF:
      case tWHILE:
      case tTRUE:
      case tFALSE:
      case tRETURN:
      case tASSERT:
      case tSKIP_LN:
      case tPUT:
      case tPUT_LN:
      case tGET:
      case tCHAR2INT:
      case tINT2CHAR:
      case tPARENTESIS_OPEN:
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_11;
      }
    }
}

  static final public void expresion(Attributes at) throws ParseException {Attributes at1 = new Attributes(), at2 = new Attributes();
        Integer operador = -1;
    relacion(at1);
at.type = at1.type;
                at.isVecComp = at1.isVecComp;
                at.name = at1.name;
                at.const_value = at1.const_value;
                // -----------------------------------------
                at.code = at1.code;
                //System.out.println(ANSI_YELLOW + "<expresion> " + at.code + ANSI_RESET);

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAND:
    case tOR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAND:{
        label_12:
        while (true) {
          jj_consume_token(tAND);
operador = 0;
          relacion(at2);
////System.out.println(ANSI_YELLOW + at1.type + ", " + at2.type + ANSI_RESET);	
                        Symbol s1 = null, s2 = null;
                        if(at1.type == Symbol.Types.ARRAY || at1.type == Symbol.Types.FUNCTION){
                                try {
                                        s1 = st.getSymbol(at1.name);
                                }
                                catch(SymbolNotFoundException e){
                                        ErrorSemantico.deteccion(e, at1.name);
                                }
                        }

                        if ((!((at1.type == at2.type) && (at1.type == Symbol.Types.BOOL))) ||
                                 ((s1 != null && ((SymbolArray)s1).baseType != Symbol.Types.BOOL) ||
                                 (s1 != null && ((SymbolFunction)s1).returnType != Symbol.Types.BOOL))){
                                at.type = Symbol.Types.UNDEFINED;
                        }
                        else{
                                at.type = Symbol.Types.BOOL;
                        }

                        at.code.addBlock(at2.code);
                        switch(operador) {
                                case 0:
                                        at.code.addInst(OpCode.AND);
                                        break;
                                case 1:
                                        at.code.addInst(OpCode.OR);
                                        break;
                        }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tAND:{
            ;
            break;
            }
          default:
            jj_la1[32] = jj_gen;
            break label_12;
          }
        }
        break;
        }
      case tOR:{
        label_13:
        while (true) {
          jj_consume_token(tOR);
operador = 1;
          relacion(at2);
//System.out.println(ANSI_YELLOW + at1.type + ", " + at2.type + ANSI_RESET);	
                        if (!((at1.type == at2.type) && (at1.type == Symbol.Types.BOOL))) {
                                //System.out.println(ANSI_YELLOW + "at1.type: " + at1.type + ", at2.type: " + at2.type + ANSI_RESET);
                                at.type = Symbol.Types.UNDEFINED;
                                ErrorSemantico.deteccion("Se esperaban booleanos 1");
                        }
                        else{
                                at.type = at1.type;
                        }
                        //at.code.addBlock(at1.code); //sobra
                        at.code.addBlock(at2.code);
                        switch(operador) {
                                case 0:
                                        at.code.addInst(OpCode.AND);
                                        break;
                                case 1:
                                        at.code.addInst(OpCode.OR);
                                        break;
                        }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tOR:{
            ;
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            break label_13;
          }
        }
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
}

  static final public void lista_una_o_mas_exps(ArrayList<Attributes> ats) throws ParseException {Attributes at1 = new Attributes(), at2 = new Attributes();
    expresion(at1);
ats.add(at1);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMA:{
        ;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        break label_14;
      }
      jj_consume_token(tCOMA);
      expresion(at2);
ats.add(at2);
    }
}

/* CREO QUE ESTÁ COMPLETADA, SI FALTA ALGO SERÍA COMPLETAR VALORES DE at */
  static final public void relacion(Attributes at) throws ParseException {Attributes at1 = new Attributes(), at2 = new Attributes();
        ArrayList<Integer> operador = new ArrayList<Integer>();
    expresion_simple(at1);
if (at1.name != "TRUE" && at1.name != "FALSE" && at1.name != "CONST_INT"  && at1.name != "CONST_CHAR" && at1.name != "CONST_STRING"){
                        try{
                                Symbol s = st.getSymbol(at1.name);

                                if(s instanceof SymbolFunction){
                                        at.type = ((SymbolFunction)s).returnType;
                                }
                                else if (s instanceof SymbolArray){
                                        at.type = ((SymbolArray)s).baseType;
                                }
                                else {
                                        at.type = at1.type;
                                }
                        }
                        catch(SymbolNotFoundException e){
                                ErrorSemantico.deteccion(e, at1.name);
                        }
                }
                else {
                        at.type = at1.type;
                }
                at.name = at1.name;
                at.isConst = at1.isConst;
                at.isVar = at1.isVar;
                at.isVecComp = at1.isVecComp;
                at.const_value = at1.const_value;
                // ----------------------------------------------------
                at.code = at1.code;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tEQU:
    case tGT:
    case tLT:
    case tGE:
    case tLE:
    case tDIF:{
      operador_relacional(operador);
      expresion_simple(at2);
if ((at1.name != "TRUE" && at1.name != "FALSE" && at1.name != "CONST_INT"  && at1.name != "CONST_CHAR" && at1.name != "CONST_STRING") &&
                   (at2.name != "TRUE" && at2.name != "FALSE" && at2.name != "CONST_INT"  && at2.name != "CONST_CHAR" && at2.name != "CONST_STRING")) {
                        try{
                                Symbol s = st.getSymbol(at1.name);
                                Symbol s2 = st.getSymbol(at2.name);
                                if(s instanceof SymbolFunction){
                                        if(s2 instanceof SymbolFunction){
                                                if(((SymbolFunction)s).returnType == ((SymbolFunction)s2).returnType){
                                                        at.type = Symbol.Types.BOOL;
                                                }
                                                else {
                                                        at.type = Symbol.Types.UNDEFINED;
                                                        ErrorSemantico.deteccion("Tipos incompatibles ...");
                                                }
                                        }
                                        else if (s2 instanceof SymbolArray){
                                                if(((SymbolFunction)s).returnType == ((SymbolArray)s2).baseType){
                                                        at.type = Symbol.Types.BOOL;
                                                }
                                                else {
                                                        at.type = Symbol.Types.UNDEFINED;
                                                        ErrorSemantico.deteccion("Tipos incompatibles ...");
                                                }
                                        }
                                        else{
                                                if(((SymbolFunction)s).returnType == at2.type){
                                                        at.type = Symbol.Types.BOOL;
                                                }
                                                else {
                                                        at.type = Symbol.Types.UNDEFINED;
                                                        ErrorSemantico.deteccion("Tipos incompatibles ...");
                                                }
                                        }
                                }
                                else if (s instanceof SymbolArray){
                                        if(s2 instanceof SymbolFunction){
                                                if(((SymbolArray)s).baseType == ((SymbolFunction)s2).returnType){
                                                        at.type = Symbol.Types.BOOL;
                                                }
                                                else {
                                                        at.type = Symbol.Types.UNDEFINED;
                                                        ErrorSemantico.deteccion("Tipos incompatibles ...");
                                                }
                                        }
                                        else if (s2 instanceof SymbolArray){
                                                if(((SymbolArray)s).baseType == ((SymbolArray)s2).baseType){
                                                        at.type = Symbol.Types.BOOL;
                                                }
                                                else {
                                                        at.type = Symbol.Types.UNDEFINED;
                                                        ErrorSemantico.deteccion("Tipos incompatibles ...");
                                                }
                                        }
                                        else{
                                                if(((SymbolArray)s).baseType == at2.type){
                                                        at.type = Symbol.Types.BOOL;
                                                }
                                                else {
                                                        at.type = Symbol.Types.UNDEFINED;
                                                        ErrorSemantico.deteccion("Tipos incompatibles ...");
                                                }
                                        }
                                }
                                else {
                                        if(s2 instanceof SymbolFunction){
                                                if(at1.type == ((SymbolFunction)s2).returnType){
                                                        at.type = Symbol.Types.BOOL;
                                                }
                                                else {
                                                        at.type = Symbol.Types.UNDEFINED;
                                                        ErrorSemantico.deteccion("Tipos incompatibles ...");
                                                }
                                        }
                                        else if (s2 instanceof SymbolArray){
                                                if(at1.type == ((SymbolArray)s2).baseType){
                                                        at.type = Symbol.Types.BOOL;
                                                }
                                                else {
                                                        at.type = Symbol.Types.UNDEFINED;
                                                        ErrorSemantico.deteccion("Tipos incompatibles ...");
                                                }
                                        }
                                        else{
                                                if(at1.type == at2.type){
                                                        at.type = Symbol.Types.BOOL;
                                                }
                                                else {
                                                        at.type = Symbol.Types.UNDEFINED;
                                                        ErrorSemantico.deteccion("Tipos incompatibles ...");
                                                }
                                        }
                                }
                        }
                        catch(SymbolNotFoundException e){
                                ErrorSemantico.deteccion(e, at1.name);
                        }
                }
                else if ((at1.name == "TRUE" || at1.name == "FALSE" || at1.name == "CONST_INT"  || at1.name == "CONST_CHAR" || at1.name == "CONST_STRING") &&
                                (at2.name != "TRUE" && at2.name != "FALSE" && at2.name != "CONST_INT"  && at2.name != "CONST_CHAR" && at2.name != "CONST_STRING")){
                        try{
                                Symbol s2 = st.getSymbol(at2.name);

                                if (s2 instanceof SymbolFunction){
                                        if(at1.type == ((SymbolFunction)s2).returnType){
                                                at.type = Symbol.Types.BOOL;
                                        }
                                        else {
                                                at.type = Symbol.Types.UNDEFINED;
                                                ErrorSemantico.deteccion("Tipos incompatibles ...");
                                        }
                                }
                                else if (s2 instanceof SymbolArray){
                                        if(at1.type == ((SymbolArray)s2).baseType){
                                                at.type = Symbol.Types.BOOL;
                                        }
                                        else {
                                                at.type = Symbol.Types.UNDEFINED;
                                                ErrorSemantico.deteccion("Tipos incompatibles ...");
                                        }
                                }
                                else{
                                        if(at1.type == at2.type){
                                                at.type = Symbol.Types.BOOL;
                                        }
                                        else {
                                                at.type = Symbol.Types.UNDEFINED;
                                                ErrorSemantico.deteccion("Tipos incompatibles ...");
                                        }
                                }
                        }
                        catch(SymbolNotFoundException e){
                                ErrorSemantico.deteccion(e, at2.name);
                        }
                }
                else if ((at1.name != "TRUE" && at1.name != "FALSE" && at1.name != "CONST_INT"  && at1.name != "CONST_CHAR" && at1.name != "CONST_STRING") &&
                                (!(at2.name != "TRUE" && at2.name != "FALSE" && at2.name != "CONST_INT"  && at2.name != "CONST_CHAR" && at2.name != "CONST_STRING"))){
                                        try{
                                                Symbol s = st.getSymbol(at1.name);

                                                if (s instanceof SymbolFunction){
                                                        if(at2.type == ((SymbolFunction)s).returnType){
                                                                at.type = Symbol.Types.BOOL;
                                                        }
                                                        else {
                                                                at.type = Symbol.Types.UNDEFINED;
                                                                ErrorSemantico.deteccion("Tipos incompatibles ...");
                                                        }
                                                }
                                                else if (s instanceof SymbolArray){
                                                        if(at2.type == ((SymbolArray)s).baseType){
                                                                at.type = Symbol.Types.BOOL;
                                                        }
                                                        else {
                                                                at.type = Symbol.Types.UNDEFINED;
                                                                ErrorSemantico.deteccion("Tipos incompatibles ...");
                                                        }
                                                }
                                                else{
                                                        if(at1.type == at2.type){
                                                                at.type = Symbol.Types.BOOL;
                                                        }
                                                        else {
                                                                at.type = Symbol.Types.UNDEFINED;
                                                                ErrorSemantico.deteccion("Tipos incompatibles ...");
                                                        }
                                                }
                                        }
                                        catch(SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, at1.name);
                                        }

                }

                else{
                        if(at1.type == at2.type){
                                at.type = Symbol.Types.BOOL;
                        }
                        else {
                                at.type = Symbol.Types.UNDEFINED;
                                ErrorSemantico.deteccion("Tipos incompatibles ...");
                        }
                }
                at.isVar = false;
                at.isVecComp = false;
                at.isConst = true;
                //System.out.println(ANSI_YELLOW + at.type + ANSI_RESET);

                // ---------------------------------------------------------------

                //at.code.addBlock(at1.code);
                at.code.addBlock(at2.code);
                switch(operador.get(0)) {
                        case 0:
                                at.code.addInst(OpCode.EQ);
                                break;
                        case 1:
                                at.code.addInst(OpCode.LT);
                                break;
                        case 2:
                                at.code.addInst(OpCode.GT);
                                break;
                        case 3:
                                at.code.addInst(OpCode.LTE);
                                break;
                        case 4:
                                at.code.addInst(OpCode.GTE);
                                break;
                        case 5:
                                at.code.addInst(OpCode.NEQ);
                                break;
                }
                //System.out.println(ANSI_YELLOW + at.code + ANSI_RESET);

      break;
      }
    default:
      jj_la1[37] = jj_gen;
      ;
    }
}

  static final public void operador_relacional(ArrayList<Integer> operador) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tEQU:{
      jj_consume_token(tEQU);
operador.add(0);
      break;
      }
    case tLT:{
      jj_consume_token(tLT);
operador.add(1);
      break;
      }
    case tGT:{
      jj_consume_token(tGT);
operador.add(2);
      break;
      }
    case tLE:{
      jj_consume_token(tLE);
operador.add(3);
      break;
      }
    case tGE:{
      jj_consume_token(tGE);
operador.add(4);
      break;
      }
    case tDIF:{
      jj_consume_token(tDIF);
operador.add(5);
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* COMPLETA */
// En 'termino' sólo se comprueba si es int cuando se detecta que hay operaciones con mul, div o mod
// En el caso de que 'termino' solo sea un factor, no se comprueba el tipo, por eso se comprueba en 
// esta función, porque podríamos recibir cualquier tipo de dato.
// Creo que se podría comprobar directamente en la función 'termino' que factor(at1) sea entero y así
// ya no tendríamos que comprobar nada en 'expresion_simple' pues siempre 'termino' será un int.
  static final public void expresion_simple(Attributes at) throws ParseException {Attributes at1 = new Attributes(), at2 = new Attributes();
        Integer operador = -1;
        Integer operador2 =  -1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tSUM:
    case tRES:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSUM:{
        jj_consume_token(tSUM);
operador2 = 0;
        break;
        }
      case tRES:{
        jj_consume_token(tRES);
operador2 = 1;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    termino(at1);
at.name = at1.name;
                at.type = at1.type;
                at.isConst = at1.isConst;
                at.isVar = at1.isVar;
                at.isVecComp = at1.isVecComp;
                at.const_value = at1.const_value;

                // ---------------------------------------------------------------------------
                at.code = at1.code;
                switch(operador2) {
                        case 1:
                                at.code.addInst(OpCode.NGI); // Si nos llega un 5, entonces devolvemos un -5
                                break;
                        default: // Es un simbolo '+' o no se ha especificado un simbolo delante.
                                break;
                }
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSUM:
      case tRES:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSUM:{
        jj_consume_token(tSUM);
operador = 0;
        break;
        }
      case tRES:{
        jj_consume_token(tRES);
operador = 1;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termino(at2);
if((at1.name != "CONST_INT") && (at2.name != "CONST_INT")){
                                try{
                                        Symbol s1 = st.getSymbol(at1.name);
                                        Symbol s2 = st.getSymbol(at2.name);
                                        if (s2 instanceof SymbolArray){
                                                if(((SymbolArray)s2).baseType != Symbol.Types.INT && at2.type != Symbol.Types.INT){
                                                        // error: El primer factor no es un entero
                                                        //System.out.println(ANSI_YELLOW + ((SymbolArray)s2).baseType + ANSI_RESET);
                                                        System.out.println(ANSI_YELLOW + "at1: " + at1.type + "; at2: " + at2.type + ANSI_RESET);
                                                        System.out.println(ANSI_YELLOW + ((SymbolArray)s2).name + ", " + ((SymbolArray)s2).baseType + ANSI_RESET);
                                                        ErrorSemantico.deteccion("El segundo termino no es un entero (tipos incompatibles - 1)");
                                                }
                                                if (s1 instanceof SymbolArray){
                                                        if(((SymbolArray)s1).baseType != ((SymbolArray)s2).baseType){
                                                                ErrorSemantico.deteccion("El primer termino y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if (s1 instanceof SymbolFunction){
                                                        if(((SymbolFunction)s1).returnType != ((SymbolArray)s2).baseType){
                                                                ErrorSemantico.deteccion("El primer termino y el segundo son de distinto tipo");
                                                        }
                                                }
                                        }
                                        else if (s2 instanceof SymbolFunction){
                                                if(((SymbolFunction)s2).returnType != Symbol.Types.INT){
                                                        // error: El primer factor no es un entero
                                                        ErrorSemantico.deteccion("El segundo termino no es un entero (tipos incompatibles - 2)");
                                                }
                                                if (s1 instanceof SymbolArray){
                                                        if(((SymbolArray)s1).baseType != ((SymbolFunction)s2).returnType){
                                                                ErrorSemantico.deteccion("El primer termino y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if (s1 instanceof SymbolFunction){
                                                        if(((SymbolFunction)s1).returnType != ((SymbolFunction)s2).returnType){
                                                                ErrorSemantico.deteccion("El primer termino y el segundo son de distinto tipo");
                                                        }
                                                }
                                        }
                                        else {
                                                if(at2.type != Symbol.Types.INT){
                                                        // error: El primer factor no es un entero
                                                        ErrorSemantico.deteccion("El segundo termino no es un entero (tipos incompatibles - 3)");
                                                }
                                                if (s1 instanceof SymbolArray){
                                                        if(((SymbolArray)s1).baseType != at2.type){
                                                                ErrorSemantico.deteccion("El primer termino y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if (s1 instanceof SymbolFunction){
                                                        if(((SymbolFunction)s1).returnType != at2.type){
                                                                ErrorSemantico.deteccion("El primer termino y el segundo son de distinto tipo");
                                                        }
                                                }
                                        }
                                }
                                catch(SymbolNotFoundException e) {
                                        ErrorSemantico.deteccion(e, ("at1: " + at1.name + "; at2: " + at2.name));
                                }
                        }
                        else{
                                // Para el caso de tener alguna constante en la operación: 
                                if(at1.name == "CONST_INT" && at2.name != "CONST_INT") {
                                        try{
                                                Symbol s2 = st.getSymbol(at2.name);
                                                if (s2 instanceof SymbolArray){
                                                        if(((SymbolArray)s2).baseType != at1.type){
                                                                ErrorSemantico.deteccion("El primer termino y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if (s2 instanceof SymbolFunction){
                                                        if(((SymbolFunction)s2).returnType != at1.type){
                                                                ErrorSemantico.deteccion("El primer termino y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if(at2.type != at1.type){
                                                        // error: El primer factor no es un entero
                                                        ErrorSemantico.deteccion("El primer termino y el segundo son de distinto tipo");
                                                }
                                        }
                                        catch (SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, at2.name);
                                        }
                                }
                                else if (at1.name != "CONST_INT" && at2.name == "CONST_INT"){
                                        try{
                                                Symbol s1 = st.getSymbol(at1.name);
                                                if (s1 instanceof SymbolArray){
                                                        if(((SymbolArray)s1).baseType != at2.type){
                                                                ErrorSemantico.deteccion("El primer termino y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if (s1 instanceof SymbolFunction){
                                                        if(((SymbolFunction)s1).returnType != at2.type){
                                                                ErrorSemantico.deteccion("El primer termino y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if(at2.type != at1.type){
                                                        // error: El primer factor no es un entero
                                                        ErrorSemantico.deteccion("El primer termino y el segundo son de distinto tipo");
                                                }
                                        }
                                        catch (SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, at1.name);
                                        }
                                }
                                // El caso de que ambas son iguales ya nos indica que los dos son enteros
                        }

                // ------------------------------------ GENERACION DE CODIGO ----------------------------------

                //at.code.addBlock(at1.code);
                at.code.addBlock(at2.code);
                switch(operador) {
                        case 0:
                                at.code.addInst(OpCode.PLUS);
                                break;
                        case 1:
                                at.code.addInst(OpCode.SBT);
                                break;
                }
    }
}

/* CREO QUE COMPLETADA */
  static final public void termino(Attributes at) throws ParseException {Attributes at1 = new Attributes(), at2 = new Attributes();
        ArrayList<Integer> operador = new ArrayList<Integer>();
    factor(at1);
at.name = at1.name; at.type = at1.type; at.code = at1.code; at.const_value = at1.const_value; /*at = at1;*/
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMUL:
      case tMOD:
      case tDIV:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_16;
      }
      operador_multiplicativo(operador);
// Aparece una operación de mul, div o mod, por lo tanto comprobamos
                        // que at1 sea entero.
                        if (at1.name != "CONST_INT"){
                                try{
                                        Symbol s = st.getSymbol(at1.name);
                                        if (s instanceof SymbolArray){
                                                if(((SymbolArray)s).baseType != Symbol.Types.INT){
                                                        // error: El primer factor no es un entero
                                                        ErrorSemantico.deteccion("El primer factor no es un entero - Array");
                                                }
                                        }
                                        else if (s instanceof SymbolFunction){
                                                if(((SymbolFunction)s).returnType != Symbol.Types.INT){
                                                        // error: El primer factor no es un entero
                                                        ErrorSemantico.deteccion("El primer factor no es un entero - Function");
                                                }
                                        }
                                        else {
                                                if(at1.type != Symbol.Types.INT){
                                                        // error: El primer factor no es un entero
                                                        ErrorSemantico.deteccion("El primer factor no es un entero");
                                                }
                                        }
                                }
                                catch(SymbolNotFoundException e) {
                                        ErrorSemantico.deteccion(e, at1.name);
                                }
                        }
      factor(at2);
if((at1.name != "CONST_INT") && (at2.name != "CONST_INT")){
                                try{
                                        Symbol s1 = st.getSymbol(at1.name);
                                        Symbol s2 = st.getSymbol(at2.name);
                                        if (s2 instanceof SymbolArray){
                                                if(((SymbolArray)s2).baseType != Symbol.Types.INT){
                                                        // error: El primer factor no es un entero
                                                        ErrorSemantico.deteccion("El segundo factor no es un entero (tipos incompatibles)");
                                                }
                                                if (s1 instanceof SymbolArray){
                                                        if(((SymbolArray)s1).baseType != ((SymbolArray)s2).baseType){
                                                                ErrorSemantico.deteccion("El primer factor y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if (s1 instanceof SymbolFunction){
                                                        if(((SymbolFunction)s1).returnType != ((SymbolArray)s2).baseType){
                                                                ErrorSemantico.deteccion("El primer factor y el segundo son de distinto tipo");
                                                        }
                                                }
                                        }
                                        else if (s2 instanceof SymbolFunction){
                                                if(((SymbolFunction)s2).returnType != Symbol.Types.INT){
                                                        // error: El primer factor no es un entero
                                                        ErrorSemantico.deteccion("El segundo factor no es un entero (tipos incompatibles)");
                                                }
                                                if (s1 instanceof SymbolArray){
                                                        if(((SymbolArray)s1).baseType != ((SymbolFunction)s2).returnType){
                                                                ErrorSemantico.deteccion("El primer factor y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if (s1 instanceof SymbolFunction){
                                                        if(((SymbolFunction)s1).returnType != ((SymbolFunction)s2).returnType){
                                                                ErrorSemantico.deteccion("El primer factor y el segundo son de distinto tipo");
                                                        }
                                                }
                                        }
                                        else {
                                                if(at2.type != Symbol.Types.INT){
                                                        // error: El primer factor no es un entero
                                                        ErrorSemantico.deteccion("El segundo factor no es un entero (tipos incompatibles)");
                                                }
                                                if (s1 instanceof SymbolArray){
                                                        if(((SymbolArray)s1).baseType != at2.type){
                                                                ErrorSemantico.deteccion("El primer factor y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if (s1 instanceof SymbolFunction){
                                                        if(((SymbolFunction)s1).returnType != at2.type){
                                                                ErrorSemantico.deteccion("El primer factor y el segundo son de distinto tipo");
                                                        }
                                                }
                                        }
                                }
                                catch(SymbolNotFoundException e) {
                                        ErrorSemantico.deteccion(e, ("at1: " + at1.name + "; at2: " + at2.name));
                                }
                        }
                        else{
                                // Para el caso de tener alguna constante en la operación: 
                                if(at1.name == "CONST_INT" && at2.name != "CONST_INT") {
                                        try{
                                                Symbol s2 = st.getSymbol(at2.name);
                                                if (s2 instanceof SymbolArray){
                                                        if(((SymbolArray)s2).baseType != at1.type){
                                                                ErrorSemantico.deteccion("El primer factor y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if (s2 instanceof SymbolFunction){
                                                        if(((SymbolFunction)s2).returnType != at1.type){
                                                                ErrorSemantico.deteccion("El primer factor y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if(at2.type != at1.type){
                                                        // error: El primer factor no es un entero
                                                        ErrorSemantico.deteccion("El primer factor y el segundo son de distinto tipo");
                                                }
                                        }
                                        catch (SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, at2.name);
                                        }
                                }
                                else if (at1.name != "CONST_INT" && at2.name == "CONST_INT"){
                                        try{
                                                Symbol s1 = st.getSymbol(at1.name);
                                                if (s1 instanceof SymbolArray){
                                                        if(((SymbolArray)s1).baseType != at2.type){
                                                                ErrorSemantico.deteccion("El primer factor y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if (s1 instanceof SymbolFunction){
                                                        if(((SymbolFunction)s1).returnType != at2.type){
                                                                ErrorSemantico.deteccion("El primer factor y el segundo son de distinto tipo");
                                                        }
                                                }
                                                else if(at2.type != at1.type){
                                                        // error: El primer factor no es un entero
                                                        ErrorSemantico.deteccion("El primer factor y el segundo son de distinto tipo");
                                                }
                                        }
                                        catch (SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, at1.name);
                                        }
                                }
                                // El caso de que ambas son iguales ya nos indica que los dos son enteros
                        }

                        // -------------------------------------------------------------------------
                        // MUL = 0; MOD = 1; DIV = 2;

                        //System.out.println(ANSI_YELLOW + "at1.code: " + at1.code + ANSI_RESET);
                        at.code.addBlock(at2.code);
                        //System.out.println(ANSI_YELLOW + "at2.code: " + at2.code + ANSI_RESET);
                        switch(operador.get(0)) {
                                case 0:
                                        at.code.addInst(OpCode.TMS);
                                        break;
                                case 1:
                                        at.code.addInst(OpCode.MOD);
                                        break;
                                case 2:
                                        at.code.addInst(OpCode.DIV);
                                        break;
                        }
    }
}

  static final public void operador_multiplicativo(ArrayList<Integer> operador) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tMUL:{
      jj_consume_token(tMUL);
operador.add(0);
      break;
      }
    case tMOD:{
      jj_consume_token(tMOD);
operador.add(1);
      break;
      }
    case tDIV:{
      jj_consume_token(tDIV);
operador.add(2);
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void factor(Attributes at) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tCONST_INT:
    case tCONST_CHAR:
    case tCONST_STRING:
    case tTRUE:
    case tFALSE:
    case tCHAR2INT:
    case tINT2CHAR:
    case tPARENTESIS_OPEN:
    case tID:{
      primario(at);

      break;
      }
    case tNOT:{
      jj_consume_token(tNOT);
      primario(at);
// ----------------------- Semántico ---------------------------
                if (at.type != Symbol.Types.BOOL){
                        ErrorSemantico.deteccion("Debe ser booleano <factor>");
                }
                // ------------------------- Código ----------------------------
                //at.code.addBlock(at.code);
                at.code.addInst(OpCode.NGB);
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void primario(Attributes at) throws ParseException {Token t; // revisar
        Token t1,t2,t3;
        ArrayList<Attributes> ats = new ArrayList<Attributes>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPARENTESIS_OPEN:{
      jj_consume_token(tPARENTESIS_OPEN);
      expresion(at);
      jj_consume_token(tPARENTESIS_CLOSE);
      break;
      }
    case tINT2CHAR:{
      jj_consume_token(tINT2CHAR);
      jj_consume_token(tPARENTESIS_OPEN);
      expresion(at);
if (at.type != Symbol.Types.INT) {
                        ErrorSemantico.deteccion("Se esperaba entero <int2char>");
                }
                else {
                        at.type = Symbol.Types.CHAR;
                }
      jj_consume_token(tPARENTESIS_CLOSE);
      break;
      }
    case tCHAR2INT:{
      jj_consume_token(tCHAR2INT);
      jj_consume_token(tPARENTESIS_OPEN);
      expresion(at);
if (at.type != Symbol.Types.CHAR) {
                        ErrorSemantico.deteccion("Se esperaba caracter <char2int>");
                }
                else {
                        at.type = Symbol.Types.INT;
                }
      jj_consume_token(tPARENTESIS_CLOSE);
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      if (jj_2_1(2)) {
        t = jj_consume_token(tID);
        jj_consume_token(tPARENTESIS_OPEN);
        lista_una_o_mas_exps(ats);
        jj_consume_token(tPARENTESIS_CLOSE);
//invoc. func. o comp. array
                Symbol s = null;
                try {
                        s = st.getSymbol(t.image);
                        if (s instanceof SymbolArray) {
                                // comprobar indice acceso de vector, habrá que obtener el rango del vector y comparar con el indice accedido
                                // comprobar también que el indice sea un entero positivo?
                                at.isVecComp = true;
                                at.type = ((SymbolArray)s).baseType;

                                if(ats.size() == 0) {
                                        ErrorSemantico.deteccion("No se ha especificado el indice del vector a acceder");
                                }
                                else{
                                        // Si lo hay, sólo habrá 1 atributo en el array de atributos si se llama a una componente de vector
                                        Attributes atA;
                                        atA = ats.get(0);
                                        if(atA.type != Symbol.Types.INT){
                                                ErrorSemantico.deteccion("El indice de acceso al vector debe ser de tipo INT");
                                        }
                                }
                        }
                        else if ((s instanceof SymbolProcedure)){

                                if(ats.size() != ((SymbolProcedure)s).parList.size()) {
                                        //System.out.println(ANSI_YELLOW + ats.size() + ANSI_RESET);
                                        //System.out.println(ANSI_YELLOW + ((SymbolProcedure)s).parList.size() + ANSI_RESET);
                                        ErrorSemantico.deteccion("Numero incorrecto de parametros -");
                                }
                                else {
                                        try {
                                                for (int i = 0; i < ats.size(); i++) {
                                                        Attributes atP;
                                                        Symbol sP;
                                                        atP = ats.get(i);
                                                        sP = ((SymbolProcedure)s).parList.get(i);

                                                        // Evitamos llamar a getSymbol si los atributos son constantes escalares
                                                        if (atP.name != "TRUE" && atP.name != "FALSE" && atP.name != "CONST_INT"  && atP.name != "CONST_CHAR" && atP.name != "CONST_STRING"){
                                                                Symbol symbol_atP = st.getSymbol(atP.name);
                                                                if(sP instanceof SymbolFunction){
                                                                        if (symbol_atP instanceof SymbolFunction){
                                                                                if (((SymbolFunction)symbol_atP).returnType != ((SymbolFunction)sP).returnType) {
                                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + ((SymbolFunction)symbol_atP).returnType + "|" + ((SymbolFunction)sP).returnType + "- Procedure1.1");
                                                                                        break;
                                                                                }
                                                                        }
                                                                        else if (symbol_atP instanceof SymbolArray){
                                                                                if (((SymbolArray)symbol_atP).baseType != ((SymbolFunction)sP).returnType) {
                                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + ((SymbolArray)symbol_atP).baseType + "|" + ((SymbolFunction)sP).returnType + "- Procedure1.2");
                                                                                        break;
                                                                                }
                                                                        }
                                                                        else{
                                                                                if (atP.type != ((SymbolFunction)sP).returnType) {
                                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + atP.type + "|" + ((SymbolFunction)sP).returnType + "- Procedure1.3");
                                                                                        break;
                                                                                }
                                                                        }
                                                                }
                                                                else if(sP instanceof SymbolArray){
                                                                        if (symbol_atP instanceof SymbolFunction){
                                                                                if (((SymbolFunction)symbol_atP).returnType != ((SymbolArray)sP).baseType) {
                                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + ((SymbolFunction)symbol_atP).returnType + "|" + ((SymbolArray)sP).baseType + "- Procedure2.1");
                                                                                        break;
                                                                                }
                                                                        }
                                                                        else if (symbol_atP instanceof SymbolArray){
                                                                                if (((SymbolArray)symbol_atP).baseType != ((SymbolArray)sP).baseType) {
                                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + ((SymbolArray)symbol_atP).baseType + "|" + ((SymbolArray)sP).baseType + "- Procedure2.2");
                                                                                        break;
                                                                                }
                                                                        }
                                                                        else {
                                                                                if (atP.type != ((SymbolArray)sP).baseType) {
                                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + atP.type + "|" + ((SymbolArray)sP).baseType + "- Procedure2.3");
                                                                                        break;
                                                                                }
                                                                        }

                                                                }
                                                        }
                                                        else{ // Casos en el que los atributos sean valores constantes (TRUE, FALSE, CONST_INT, ...)
                                                                if (atP.type != sP.type) {
                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + atP.type + "|" + sP.type + "- Procedure3");
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }
                                        catch(SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, "Atributo atP");
                                        }
                                }
                        }
                        else if (s instanceof SymbolFunction){

                                if(ats.size() != ((SymbolFunction)s).parList.size()) {
                                        ErrorSemantico.deteccion("Numero incorrecto de parametros");
                                }
                                else {
                                        try {
                                                for (int i = 0; i < ats.size(); i++) {
                                                        Attributes atF;
                                                        Symbol sF;
                                                        atF = ats.get(i);
                                                        sF = ((SymbolFunction)s).parList.get(i);

                                                        // Evitamos llamar a getSymbol si los atributos son constantes escalares
                                                        if (atF.name != "TRUE" && atF.name != "FALSE" && atF.name != "CONST_INT"  && atF.name != "CONST_CHAR" && atF.name != "CONST_STRING"){
                                                                Symbol symbol_atF = st.getSymbol(atF.name);
                                                                if(sF instanceof SymbolFunction){
                                                                        if (symbol_atF instanceof SymbolFunction){
                                                                                if (((SymbolFunction)symbol_atF).returnType != ((SymbolFunction)sF).returnType) {
                                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + ((SymbolFunction)symbol_atF).returnType + "|" + ((SymbolFunction)sF).returnType + "- Function1.1");
                                                                                        break;
                                                                                }
                                                                        }
                                                                        else if (symbol_atF instanceof SymbolArray){
                                                                                if (((SymbolArray)symbol_atF).baseType != ((SymbolFunction)sF).returnType) {
                                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + ((SymbolArray)symbol_atF).baseType + "|" + ((SymbolFunction)sF).returnType + "- Function1.2");
                                                                                        break;
                                                                                }
                                                                        }
                                                                        else{
                                                                                if (atF.type != ((SymbolFunction)sF).returnType) {
                                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + atF.type + "|" + ((SymbolFunction)sF).returnType + "- Function1.3");
                                                                                        break;
                                                                                }
                                                                        }
                                                                }
                                                                else if(sF instanceof SymbolArray){
                                                                        if (symbol_atF instanceof SymbolFunction){
                                                                                if (((SymbolFunction)symbol_atF).returnType != ((SymbolArray)sF).baseType) {
                                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + ((SymbolFunction)symbol_atF).returnType + "|" + ((SymbolArray)sF).baseType + "- Function2.1");
                                                                                        break;
                                                                                }
                                                                        }
                                                                        else if (symbol_atF instanceof SymbolArray){
                                                                                if (((SymbolArray)symbol_atF).baseType != ((SymbolArray)sF).baseType) {
                                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + ((SymbolArray)symbol_atF).baseType + "|" + ((SymbolArray)sF).baseType + "- Function2.2");
                                                                                        break;
                                                                                }
                                                                        }
                                                                        else {
                                                                                if (atF.type != ((SymbolArray)sF).baseType) {
                                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + atF.type + "|" + ((SymbolArray)sF).baseType + "- Function2.3");
                                                                                        break;
                                                                                }
                                                                        }

                                                                }
                                                        }
                                                        else{ // Casos en el que los atributos sean valores constantes (TRUE, FALSE, CONST_INT, ...)
                                                                if (atF.type != sF.type) {
                                                                        ErrorSemantico.deteccion("Los tipos de los parametros no coinciden: " + atF.type + "|" + sF.type + "- Function3");
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }
                                        catch(SymbolNotFoundException e){
                                                ErrorSemantico.deteccion(e, "Atributo atF");
                                        }
                                        at.type = ((SymbolFunction)s).returnType;
                                }
                        }
                        else {
                                ErrorSemantico.deteccion("Se esperaba componente de vector, funci\u00f3n o procedimiento ...");
                        }
                }
                catch (SymbolNotFoundException e) {
                        ErrorSemantico.deteccion(e, t.image);
                }
                at.isVar = false;
                at.name = t.image;
                // Procesar la lista de parametros reales ...
                //...

      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          t = jj_consume_token(tID);
//var. o func. sin pars 
                Symbol s = null;
                try {
                        s = st.getSymbol(t.image);
                        at.isVar = true;
                        at.type = s.type;
                        at.name = t.image;
                }
                catch (SymbolNotFoundException e) {
                        ErrorSemantico.deteccion(e, t.image);
                }
                // -----------------------------------------
                at.code.addInst(OpCode.SRF, (st.level - s.nivel), (int)s.dir);
                at.code.addInst(OpCode.DRF);
                //System.out.println(ANSI_YELLOW + s.name + ": " + (int)s.dir + ANSI_RESET);

          break;
          }
        case tCONST_INT:{
          t1 = jj_consume_token(tCONST_INT);
at.name = "CONST_INT";
                at.isVar = false;
                at.type = Symbol.Types.INT;
                at.isConst = true;
                at.const_value = t1.image;
                // -------------------------------
                at.code.addInst(OpCode.STC, Integer.valueOf(t1.image));
                //System.out.println(ANSI_YELLOW + "STC" + ANSI_RESET);

          break;
          }
        case tCONST_CHAR:{
          t2 = jj_consume_token(tCONST_CHAR);
at.name = "CONST_CHAR";
                at.isVar = false;
                at.type = Symbol.Types.CHAR;
                at.isConst = true;
                at.const_value = t2.image;
                // -------------------------------
                at.code.addInst(OpCode.STC, ((int)(t2.image).charAt(1)) );
                //System.out.println(ANSI_YELLOW + "STC2" + ANSI_RESET);

          break;
          }
        case tCONST_STRING:{
          t3 = jj_consume_token(tCONST_STRING);
//rn sf.primario_8(t); 
                at.name = "CONST_STRING";
                at.isVar = false;
                at.type = Symbol.Types.STRING;
                at.isConst = true;
                at.const_value = t3.image;
                // -------------------------------
                // Como se almacena un string?

          break;
          }
        case tTRUE:{
          jj_consume_token(tTRUE);
at.name = "TRUE";
                at.isVar = false;
                at.type = Symbol.Types.BOOL;
                at.isConst = true;
                // -------------------------------
                at.code.addInst(OpCode.STC, 1);
                //System.out.println(ANSI_YELLOW + "STC3" + ANSI_RESET);

          break;
          }
        case tFALSE:{
          jj_consume_token(tFALSE);
at.name = "FALSE";
                at.isVar = false;
                at.type = Symbol.Types.BOOL;
                at.isConst = true;
                // -------------------------------
                at.code.addInst(OpCode.STC, 0);
                //System.out.println(ANSI_YELLOW + "STC4" + ANSI_RESET);

          break;
          }
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tPARENTESIS_OPEN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public alikeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[48];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e00,0x200000,0x200000,0x0,0x9e00,0x9e00,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x80374000,0x80374000,0x80374000,0x80374000,0x0,0x0,0x0,0x0,0x0,0xfc00000,0xfc00000,0x300000,0x300000,0x300000,0x300000,0x70000000,0x70000000,0x80070000,0x0,0x70000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x80000,0x0,0xc00,0xc00,0xc00,0x80000,0x0,0xc00,0x80000,0x0,0xc00,0x8000000,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x40000000,0x0,0x0,0x8000000,0x0,0x0,0x8,0x10,0x3f60344,0x3f40344,0x3f40344,0x3f60344,0x1,0x2,0x3,0x3,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000300,0x3000000,0x300,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x8,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x2,0x0,0x0,0x0,0xa,0xa,0xa,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x2,0x8,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public alike(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public alike(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 48; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 48; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public alike(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 48; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new alikeTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 48; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public alike(alikeTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 48; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(alikeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 48; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[68];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 48; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 68; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
